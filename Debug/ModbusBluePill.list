
ModbusBluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000726c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800737c  0800737c  0001737c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f4  080074f4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080074f4  080074f4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074f4  080074f4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f4  080074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080074fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b88  20000020  0800751c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ba8  0800751c  00021ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc32  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bd1  00000000  00000000  0003bc7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0003f850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  00040ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1c3  00000000  00000000  00041fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018483  00000000  00000000  0005c1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000949b7  00000000  00000000  0007462e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108fe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005524  00000000  00000000  00109038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08007364 	.word	0x08007364

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08007364 	.word	0x08007364

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000154:	4a08      	ldr	r2, [pc, #32]	; (8000178 <MX_FREERTOS_Init+0x28>)
 8000156:	2100      	movs	r1, #0
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <MX_FREERTOS_Init+0x2c>)
 800015a:	f002 f9c5 	bl	80024e8 <osThreadNew>
 800015e:	4603      	mov	r3, r0
 8000160:	4a07      	ldr	r2, [pc, #28]	; (8000180 <MX_FREERTOS_Init+0x30>)
 8000162:	6013      	str	r3, [r2, #0]

  /* creation of myTaskSlave */
  myTaskSlaveHandle = osThreadNew(StartTaskSlave, NULL, &myTaskSlave_attributes);
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <MX_FREERTOS_Init+0x34>)
 8000166:	2100      	movs	r1, #0
 8000168:	4807      	ldr	r0, [pc, #28]	; (8000188 <MX_FREERTOS_Init+0x38>)
 800016a:	f002 f9bd 	bl	80024e8 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a06      	ldr	r2, [pc, #24]	; (800018c <MX_FREERTOS_Init+0x3c>)
 8000172:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	0800741c 	.word	0x0800741c
 800017c:	08000191 	.word	0x08000191
 8000180:	20001948 	.word	0x20001948
 8000184:	08007440 	.word	0x08007440
 8000188:	080001a1 	.word	0x080001a1
 800018c:	20001954 	.word	0x20001954

08000190 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1);
 8000198:	2001      	movs	r0, #1
 800019a:	f002 fa4f 	bl	800263c <osDelay>
 800019e:	e7fb      	b.n	8000198 <StartDefaultTask+0x8>

080001a0 <StartTaskSlave>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSlave */
void StartTaskSlave(void *argument)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSlave */
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(ModbusH.ModBusSphrHandle , 100);
 80001a8:	4b10      	ldr	r3, [pc, #64]	; (80001ec <StartTaskSlave+0x4c>)
 80001aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80001ae:	2164      	movs	r1, #100	; 0x64
 80001b0:	4618      	mov	r0, r3
 80001b2:	f003 f895 	bl	80032e0 <xQueueSemaphoreTake>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ModbusH.u16regs[0] & 0x1);
 80001b6:	4b0d      	ldr	r3, [pc, #52]	; (80001ec <StartTaskSlave+0x4c>)
 80001b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80001bc:	881b      	ldrh	r3, [r3, #0]
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	f003 0301 	and.w	r3, r3, #1
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	461a      	mov	r2, r3
 80001c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001cc:	4808      	ldr	r0, [pc, #32]	; (80001f0 <StartTaskSlave+0x50>)
 80001ce:	f000 fdeb 	bl	8000da8 <HAL_GPIO_WritePin>
	  xSemaphoreGive(ModbusH.ModBusSphrHandle);
 80001d2:	4b06      	ldr	r3, [pc, #24]	; (80001ec <StartTaskSlave+0x4c>)
 80001d4:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80001d8:	2300      	movs	r3, #0
 80001da:	2200      	movs	r2, #0
 80001dc:	2100      	movs	r1, #0
 80001de:	f002 fe09 	bl	8002df4 <xQueueGenericSend>
	  osDelay(200);
 80001e2:	20c8      	movs	r0, #200	; 0xc8
 80001e4:	f002 fa2a 	bl	800263c <osDelay>
	  xSemaphoreTake(ModbusH.ModBusSphrHandle , 100);
 80001e8:	e7de      	b.n	80001a8 <StartTaskSlave+0x8>
 80001ea:	bf00      	nop
 80001ec:	20001958 	.word	0x20001958
 80001f0:	40011000 	.word	0x40011000

080001f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b088      	sub	sp, #32
 80001f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001fa:	f107 0310 	add.w	r3, r7, #16
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000208:	4b24      	ldr	r3, [pc, #144]	; (800029c <MX_GPIO_Init+0xa8>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a23      	ldr	r2, [pc, #140]	; (800029c <MX_GPIO_Init+0xa8>)
 800020e:	f043 0310 	orr.w	r3, r3, #16
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b21      	ldr	r3, [pc, #132]	; (800029c <MX_GPIO_Init+0xa8>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f003 0310 	and.w	r3, r3, #16
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000220:	4b1e      	ldr	r3, [pc, #120]	; (800029c <MX_GPIO_Init+0xa8>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a1d      	ldr	r2, [pc, #116]	; (800029c <MX_GPIO_Init+0xa8>)
 8000226:	f043 0320 	orr.w	r3, r3, #32
 800022a:	6193      	str	r3, [r2, #24]
 800022c:	4b1b      	ldr	r3, [pc, #108]	; (800029c <MX_GPIO_Init+0xa8>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	f003 0320 	and.w	r3, r3, #32
 8000234:	60bb      	str	r3, [r7, #8]
 8000236:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_GPIO_Init+0xa8>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a17      	ldr	r2, [pc, #92]	; (800029c <MX_GPIO_Init+0xa8>)
 800023e:	f043 0308 	orr.w	r3, r3, #8
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b15      	ldr	r3, [pc, #84]	; (800029c <MX_GPIO_Init+0xa8>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0308 	and.w	r3, r3, #8
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <MX_GPIO_Init+0xa8>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a11      	ldr	r2, [pc, #68]	; (800029c <MX_GPIO_Init+0xa8>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <MX_GPIO_Init+0xa8>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0304 	and.w	r3, r3, #4
 8000264:	603b      	str	r3, [r7, #0]
 8000266:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026e:	480c      	ldr	r0, [pc, #48]	; (80002a0 <MX_GPIO_Init+0xac>)
 8000270:	f000 fd9a 	bl	8000da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027a:	2301      	movs	r3, #1
 800027c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027e:	2300      	movs	r3, #0
 8000280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000282:	2302      	movs	r3, #2
 8000284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000286:	f107 0310 	add.w	r3, r7, #16
 800028a:	4619      	mov	r1, r3
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <MX_GPIO_Init+0xac>)
 800028e:	f000 fc07 	bl	8000aa0 <HAL_GPIO_Init>

}
 8000292:	bf00      	nop
 8000294:	3720      	adds	r7, #32
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40021000 	.word	0x40021000
 80002a0:	40011000 	.word	0x40011000

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a8:	f000 fa72 	bl	8000790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ac:	f000 f836 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b0:	f7ff ffa0 	bl	80001f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002b4:	f000 f95a 	bl	800056c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80002b8:	f000 f982 	bl	80005c0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  ModbusH.uModbusType = MB_SLAVE;
 80002bc:	4b14      	ldr	r3, [pc, #80]	; (8000310 <main+0x6c>)
 80002be:	2203      	movs	r2, #3
 80002c0:	701a      	strb	r2, [r3, #0]
  ModbusH.port =  &huart3;
 80002c2:	4b13      	ldr	r3, [pc, #76]	; (8000310 <main+0x6c>)
 80002c4:	4a13      	ldr	r2, [pc, #76]	; (8000314 <main+0x70>)
 80002c6:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1; //Modbus slave ID
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <main+0x6c>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <main+0x6c>)
 80002d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002d4:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
  ModbusH.EN_Port = NULL;
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <main+0x6c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  ModbusH.u16regs = ModbusDATA;
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <main+0x6c>)
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <main+0x74>)
 80002e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <main+0x6c>)
 80002e8:	2208      	movs	r2, #8
 80002ea:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
  ModbusH.xTypeHW = USART_HW;
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <main+0x6c>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  //Initialize Modbus library
  ModbusInit(&ModbusH);
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <main+0x6c>)
 80002f8:	f005 fc8e 	bl	8005c18 <ModbusInit>
  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <main+0x6c>)
 80002fe:	f005 fd2d 	bl	8005d5c <ModbusStart>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000302:	f002 f88b 	bl	800241c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000306:	f7ff ff23 	bl	8000150 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800030a:	f002 f8b9 	bl	8002480 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800030e:	e7fe      	b.n	800030e <main+0x6a>
 8000310:	20001958 	.word	0x20001958
 8000314:	20001ae4 	.word	0x20001ae4
 8000318:	20000000 	.word	0x20000000

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b090      	sub	sp, #64	; 0x40
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0318 	add.w	r3, r7, #24
 8000326:	2228      	movs	r2, #40	; 0x28
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f007 f812 	bl	8007354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800033e:	2301      	movs	r3, #1
 8000340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000346:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	2301      	movs	r3, #1
 800034e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000350:	2302      	movs	r3, #2
 8000352:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800035a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800035e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fd37 	bl	8000dd8 <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000370:	f000 f82c 	bl	80003cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	230f      	movs	r3, #15
 8000376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000378:	2302      	movs	r3, #2
 800037a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f000 ffa2 	bl	80012d8 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800039a:	f000 f817 	bl	80003cc <Error_Handler>
  }
}
 800039e:	bf00      	nop
 80003a0:	3740      	adds	r7, #64	; 0x40
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d101      	bne.n	80003be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ba:	f000 f9ff 	bl	80007bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40000800 	.word	0x40000800

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <Error_Handler+0x8>
	...

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003de:	4b18      	ldr	r3, [pc, #96]	; (8000440 <HAL_MspInit+0x68>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a17      	ldr	r2, [pc, #92]	; (8000440 <HAL_MspInit+0x68>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <HAL_MspInit+0x68>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <HAL_MspInit+0x68>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a11      	ldr	r2, [pc, #68]	; (8000440 <HAL_MspInit+0x68>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <HAL_MspInit+0x68>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	210f      	movs	r1, #15
 8000412:	f06f 0001 	mvn.w	r0, #1
 8000416:	f000 faa2 	bl	800095e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <HAL_MspInit+0x6c>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <HAL_MspInit+0x6c>)
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000
 8000444:	40010000 	.word	0x40010000

08000448 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08c      	sub	sp, #48	; 0x30
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000458:	2200      	movs	r2, #0
 800045a:	6879      	ldr	r1, [r7, #4]
 800045c:	201e      	movs	r0, #30
 800045e:	f000 fa7e 	bl	800095e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000462:	201e      	movs	r0, #30
 8000464:	f000 fa97 	bl	8000996 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000468:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <HAL_InitTick+0xa0>)
 800046a:	69db      	ldr	r3, [r3, #28]
 800046c:	4a1e      	ldr	r2, [pc, #120]	; (80004e8 <HAL_InitTick+0xa0>)
 800046e:	f043 0304 	orr.w	r3, r3, #4
 8000472:	61d3      	str	r3, [r2, #28]
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <HAL_InitTick+0xa0>)
 8000476:	69db      	ldr	r3, [r3, #28]
 8000478:	f003 0304 	and.w	r3, r3, #4
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000480:	f107 0210 	add.w	r2, r7, #16
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	4611      	mov	r1, r2
 800048a:	4618      	mov	r0, r3
 800048c:	f001 f8a0 	bl	80015d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000490:	f001 f876 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
 8000494:	4603      	mov	r3, r0
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800049a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800049c:	4a13      	ldr	r2, [pc, #76]	; (80004ec <HAL_InitTick+0xa4>)
 800049e:	fba2 2303 	umull	r2, r3, r2, r3
 80004a2:	0c9b      	lsrs	r3, r3, #18
 80004a4:	3b01      	subs	r3, #1
 80004a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <HAL_InitTick+0xa8>)
 80004aa:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <HAL_InitTick+0xac>)
 80004ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <HAL_InitTick+0xa8>)
 80004b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004b4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_InitTick+0xa8>)
 80004b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ba:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_InitTick+0xa8>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <HAL_InitTick+0xa8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <HAL_InitTick+0xa8>)
 80004ca:	f001 f8cf 	bl	800166c <HAL_TIM_Base_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d104      	bne.n	80004de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80004d4:	4806      	ldr	r0, [pc, #24]	; (80004f0 <HAL_InitTick+0xa8>)
 80004d6:	f001 f921 	bl	800171c <HAL_TIM_Base_Start_IT>
 80004da:	4603      	mov	r3, r0
 80004dc:	e000      	b.n	80004e0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80004de:	2301      	movs	r3, #1
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3730      	adds	r7, #48	; 0x30
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	431bde83 	.word	0x431bde83
 80004f0:	20001a9c 	.word	0x20001a9c
 80004f4:	40000800 	.word	0x40000800

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
	...

08000524 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <TIM4_IRQHandler+0x10>)
 800052a:	f001 f949 	bl	80017c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20001a9c 	.word	0x20001a9c

08000538 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <USART1_IRQHandler+0x10>)
 800053e:	f001 fc1d 	bl	8001d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20001b24 	.word	0x20001b24

0800054c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <USART3_IRQHandler+0x10>)
 8000552:	f001 fc13 	bl	8001d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20001ae4 	.word	0x20001ae4

08000560 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <MX_USART1_UART_Init+0x50>)
 8000574:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 8000578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800057c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 8000592:	220c      	movs	r2, #12
 8000594:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 80005a4:	f001 faac 	bl	8001b00 <HAL_UART_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005ae:	f7ff ff0d 	bl	80003cc <Error_Handler>
  }

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20001b24 	.word	0x20001b24
 80005bc:	40013800 	.word	0x40013800

080005c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <MX_USART3_UART_Init+0x50>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005f8:	f001 fa82 	bl	8001b00 <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000602:	f7ff fee3 	bl	80003cc <Error_Handler>
  }

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20001ae4 	.word	0x20001ae4
 8000610:	40004800 	.word	0x40004800

08000614 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0318 	add.w	r3, r7, #24
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a40      	ldr	r2, [pc, #256]	; (8000730 <HAL_UART_MspInit+0x11c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d13a      	bne.n	80006aa <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000634:	4b3f      	ldr	r3, [pc, #252]	; (8000734 <HAL_UART_MspInit+0x120>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a3e      	ldr	r2, [pc, #248]	; (8000734 <HAL_UART_MspInit+0x120>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b3c      	ldr	r3, [pc, #240]	; (8000734 <HAL_UART_MspInit+0x120>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b39      	ldr	r3, [pc, #228]	; (8000734 <HAL_UART_MspInit+0x120>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a38      	ldr	r2, [pc, #224]	; (8000734 <HAL_UART_MspInit+0x120>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b36      	ldr	r3, [pc, #216]	; (8000734 <HAL_UART_MspInit+0x120>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	4619      	mov	r1, r3
 8000678:	482f      	ldr	r0, [pc, #188]	; (8000738 <HAL_UART_MspInit+0x124>)
 800067a:	f000 fa11 	bl	8000aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800067e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0318 	add.w	r3, r7, #24
 8000690:	4619      	mov	r1, r3
 8000692:	4829      	ldr	r0, [pc, #164]	; (8000738 <HAL_UART_MspInit+0x124>)
 8000694:	f000 fa04 	bl	8000aa0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2105      	movs	r1, #5
 800069c:	2025      	movs	r0, #37	; 0x25
 800069e:	f000 f95e 	bl	800095e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006a2:	2025      	movs	r0, #37	; 0x25
 80006a4:	f000 f977 	bl	8000996 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80006a8:	e03e      	b.n	8000728 <HAL_UART_MspInit+0x114>
  else if(uartHandle->Instance==USART3)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a23      	ldr	r2, [pc, #140]	; (800073c <HAL_UART_MspInit+0x128>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d139      	bne.n	8000728 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <HAL_UART_MspInit+0x120>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	4a1e      	ldr	r2, [pc, #120]	; (8000734 <HAL_UART_MspInit+0x120>)
 80006ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006be:	61d3      	str	r3, [r2, #28]
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <HAL_UART_MspInit+0x120>)
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <HAL_UART_MspInit+0x120>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a18      	ldr	r2, [pc, #96]	; (8000734 <HAL_UART_MspInit+0x120>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_UART_MspInit+0x120>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	4619      	mov	r1, r3
 80006f8:	4811      	ldr	r0, [pc, #68]	; (8000740 <HAL_UART_MspInit+0x12c>)
 80006fa:	f000 f9d1 	bl	8000aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 0318 	add.w	r3, r7, #24
 8000710:	4619      	mov	r1, r3
 8000712:	480b      	ldr	r0, [pc, #44]	; (8000740 <HAL_UART_MspInit+0x12c>)
 8000714:	f000 f9c4 	bl	8000aa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2105      	movs	r1, #5
 800071c:	2027      	movs	r0, #39	; 0x27
 800071e:	f000 f91e 	bl	800095e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000722:	2027      	movs	r0, #39	; 0x27
 8000724:	f000 f937 	bl	8000996 <HAL_NVIC_EnableIRQ>
}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40013800 	.word	0x40013800
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800
 800073c:	40004800 	.word	0x40004800
 8000740:	40010c00 	.word	0x40010c00

08000744 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000744:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000746:	e003      	b.n	8000750 <LoopCopyDataInit>

08000748 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800074a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800074c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800074e:	3104      	adds	r1, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000754:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000756:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000758:	d3f6      	bcc.n	8000748 <CopyDataInit>
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800075c:	e002      	b.n	8000764 <LoopFillZerobss>

0800075e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000760:	f842 3b04 	str.w	r3, [r2], #4

08000764 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000766:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000768:	d3f9      	bcc.n	800075e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800076a:	f7ff fef9 	bl	8000560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800076e:	f006 fdbf 	bl	80072f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000772:	f7ff fd97 	bl	80002a4 <main>
  bx lr
 8000776:	4770      	bx	lr
  ldr r3, =_sidata
 8000778:	080074fc 	.word	0x080074fc
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000780:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8000784:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8000788:	20001ba8 	.word	0x20001ba8

0800078c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC1_2_IRQHandler>
	...

08000790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_Init+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_Init+0x28>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f8d1 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff fe4e 	bl	8000448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ac:	f7ff fe14 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40022000 	.word	0x40022000

080007bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_IncTick+0x1c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <HAL_IncTick+0x20>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a03      	ldr	r2, [pc, #12]	; (80007dc <HAL_IncTick+0x20>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	20000018 	.word	0x20000018
 80007dc:	20001b64 	.word	0x20001b64

080007e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return uwTick;
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <HAL_GetTick+0x10>)
 80007e6:	681b      	ldr	r3, [r3, #0]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	20001b64 	.word	0x20001b64

080007f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <__NVIC_SetPriorityGrouping+0x44>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000810:	4013      	ands	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800081c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000826:	4a04      	ldr	r2, [pc, #16]	; (8000838 <__NVIC_SetPriorityGrouping+0x44>)
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	60d3      	str	r3, [r2, #12]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <__NVIC_GetPriorityGrouping+0x18>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	0a1b      	lsrs	r3, r3, #8
 8000846:	f003 0307 	and.w	r3, r3, #7
}
 800084a:	4618      	mov	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	2b00      	cmp	r3, #0
 8000868:	db0b      	blt.n	8000882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	f003 021f 	and.w	r2, r3, #31
 8000870:	4906      	ldr	r1, [pc, #24]	; (800088c <__NVIC_EnableIRQ+0x34>)
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	095b      	lsrs	r3, r3, #5
 8000878:	2001      	movs	r0, #1
 800087a:	fa00 f202 	lsl.w	r2, r0, r2
 800087e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	e000e100 	.word	0xe000e100

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db0a      	blt.n	80008ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	490c      	ldr	r1, [pc, #48]	; (80008dc <__NVIC_SetPriority+0x4c>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	0112      	lsls	r2, r2, #4
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	440b      	add	r3, r1
 80008b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b8:	e00a      	b.n	80008d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4908      	ldr	r1, [pc, #32]	; (80008e0 <__NVIC_SetPriority+0x50>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	3b04      	subs	r3, #4
 80008c8:	0112      	lsls	r2, r2, #4
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	440b      	add	r3, r1
 80008ce:	761a      	strb	r2, [r3, #24]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	bf28      	it	cs
 8000902:	2304      	movcs	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	2b06      	cmp	r3, #6
 800090c:	d902      	bls.n	8000914 <NVIC_EncodePriority+0x30>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3b03      	subs	r3, #3
 8000912:	e000      	b.n	8000916 <NVIC_EncodePriority+0x32>
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	f04f 32ff 	mov.w	r2, #4294967295
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092c:	f04f 31ff 	mov.w	r1, #4294967295
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43d9      	mvns	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	4313      	orrs	r3, r2
         );
}
 800093e:	4618      	mov	r0, r3
 8000940:	3724      	adds	r7, #36	; 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff4f 	bl	80007f4 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff64 	bl	800083c <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ffb2 	bl	80008e4 <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff81 	bl	8000890 <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff57 	bl	8000858 <__NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d005      	beq.n	80009d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2204      	movs	r2, #4
 80009ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
 80009d4:	e051      	b.n	8000a7a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 020e 	bic.w	r2, r2, #14
 80009e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f022 0201 	bic.w	r2, r2, #1
 80009f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <HAL_DMA_Abort_IT+0xd0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d029      	beq.n	8000a54 <HAL_DMA_Abort_IT+0xa0>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a20      	ldr	r2, [pc, #128]	; (8000a88 <HAL_DMA_Abort_IT+0xd4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d022      	beq.n	8000a50 <HAL_DMA_Abort_IT+0x9c>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <HAL_DMA_Abort_IT+0xd8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d01a      	beq.n	8000a4a <HAL_DMA_Abort_IT+0x96>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <HAL_DMA_Abort_IT+0xdc>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d012      	beq.n	8000a44 <HAL_DMA_Abort_IT+0x90>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <HAL_DMA_Abort_IT+0xe0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d00a      	beq.n	8000a3e <HAL_DMA_Abort_IT+0x8a>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	; (8000a98 <HAL_DMA_Abort_IT+0xe4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d102      	bne.n	8000a38 <HAL_DMA_Abort_IT+0x84>
 8000a32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a36:	e00e      	b.n	8000a56 <HAL_DMA_Abort_IT+0xa2>
 8000a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a3c:	e00b      	b.n	8000a56 <HAL_DMA_Abort_IT+0xa2>
 8000a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a42:	e008      	b.n	8000a56 <HAL_DMA_Abort_IT+0xa2>
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	e005      	b.n	8000a56 <HAL_DMA_Abort_IT+0xa2>
 8000a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a4e:	e002      	b.n	8000a56 <HAL_DMA_Abort_IT+0xa2>
 8000a50:	2310      	movs	r3, #16
 8000a52:	e000      	b.n	8000a56 <HAL_DMA_Abort_IT+0xa2>
 8000a54:	2301      	movs	r3, #1
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <HAL_DMA_Abort_IT+0xe8>)
 8000a58:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	4798      	blx	r3
    } 
  }
  return status;
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40020008 	.word	0x40020008
 8000a88:	4002001c 	.word	0x4002001c
 8000a8c:	40020030 	.word	0x40020030
 8000a90:	40020044 	.word	0x40020044
 8000a94:	40020058 	.word	0x40020058
 8000a98:	4002006c 	.word	0x4002006c
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b08b      	sub	sp, #44	; 0x2c
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab2:	e169      	b.n	8000d88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	69fa      	ldr	r2, [r7, #28]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f040 8158 	bne.w	8000d82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	4a9a      	ldr	r2, [pc, #616]	; (8000d40 <HAL_GPIO_Init+0x2a0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d05e      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000adc:	4a98      	ldr	r2, [pc, #608]	; (8000d40 <HAL_GPIO_Init+0x2a0>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d875      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000ae2:	4a98      	ldr	r2, [pc, #608]	; (8000d44 <HAL_GPIO_Init+0x2a4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d058      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000ae8:	4a96      	ldr	r2, [pc, #600]	; (8000d44 <HAL_GPIO_Init+0x2a4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d86f      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000aee:	4a96      	ldr	r2, [pc, #600]	; (8000d48 <HAL_GPIO_Init+0x2a8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d052      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000af4:	4a94      	ldr	r2, [pc, #592]	; (8000d48 <HAL_GPIO_Init+0x2a8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d869      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000afa:	4a94      	ldr	r2, [pc, #592]	; (8000d4c <HAL_GPIO_Init+0x2ac>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d04c      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <HAL_GPIO_Init+0x2ac>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d863      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b06:	4a92      	ldr	r2, [pc, #584]	; (8000d50 <HAL_GPIO_Init+0x2b0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d046      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000b0c:	4a90      	ldr	r2, [pc, #576]	; (8000d50 <HAL_GPIO_Init+0x2b0>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d85d      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b12:	2b12      	cmp	r3, #18
 8000b14:	d82a      	bhi.n	8000b6c <HAL_GPIO_Init+0xcc>
 8000b16:	2b12      	cmp	r3, #18
 8000b18:	d859      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <HAL_GPIO_Init+0x80>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b9b 	.word	0x08000b9b
 8000b24:	08000b75 	.word	0x08000b75
 8000b28:	08000b87 	.word	0x08000b87
 8000b2c:	08000bc9 	.word	0x08000bc9
 8000b30:	08000bcf 	.word	0x08000bcf
 8000b34:	08000bcf 	.word	0x08000bcf
 8000b38:	08000bcf 	.word	0x08000bcf
 8000b3c:	08000bcf 	.word	0x08000bcf
 8000b40:	08000bcf 	.word	0x08000bcf
 8000b44:	08000bcf 	.word	0x08000bcf
 8000b48:	08000bcf 	.word	0x08000bcf
 8000b4c:	08000bcf 	.word	0x08000bcf
 8000b50:	08000bcf 	.word	0x08000bcf
 8000b54:	08000bcf 	.word	0x08000bcf
 8000b58:	08000bcf 	.word	0x08000bcf
 8000b5c:	08000bcf 	.word	0x08000bcf
 8000b60:	08000bcf 	.word	0x08000bcf
 8000b64:	08000b7d 	.word	0x08000b7d
 8000b68:	08000b91 	.word	0x08000b91
 8000b6c:	4a79      	ldr	r2, [pc, #484]	; (8000d54 <HAL_GPIO_Init+0x2b4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d013      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b72:	e02c      	b.n	8000bce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	623b      	str	r3, [r7, #32]
          break;
 8000b7a:	e029      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	3304      	adds	r3, #4
 8000b82:	623b      	str	r3, [r7, #32]
          break;
 8000b84:	e024      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	3308      	adds	r3, #8
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e01f      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	330c      	adds	r3, #12
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e01a      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	623b      	str	r3, [r7, #32]
          break;
 8000ba6:	e013      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d105      	bne.n	8000bbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	611a      	str	r2, [r3, #16]
          break;
 8000bba:	e009      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	615a      	str	r2, [r3, #20]
          break;
 8000bc6:	e003      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	e000      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          break;
 8000bce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2bff      	cmp	r3, #255	; 0xff
 8000bd4:	d801      	bhi.n	8000bda <HAL_GPIO_Init+0x13a>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	e001      	b.n	8000bde <HAL_GPIO_Init+0x13e>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	2bff      	cmp	r3, #255	; 0xff
 8000be4:	d802      	bhi.n	8000bec <HAL_GPIO_Init+0x14c>
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	e002      	b.n	8000bf2 <HAL_GPIO_Init+0x152>
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	3b08      	subs	r3, #8
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	401a      	ands	r2, r3
 8000c04:	6a39      	ldr	r1, [r7, #32]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 80b1 	beq.w	8000d82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c20:	4b4d      	ldr	r3, [pc, #308]	; (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a4c      	ldr	r2, [pc, #304]	; (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c38:	4a48      	ldr	r2, [pc, #288]	; (8000d5c <HAL_GPIO_Init+0x2bc>)
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3302      	adds	r3, #2
 8000c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	220f      	movs	r2, #15
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <HAL_GPIO_Init+0x2c0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d013      	beq.n	8000c8c <HAL_GPIO_Init+0x1ec>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <HAL_GPIO_Init+0x2c4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d00d      	beq.n	8000c88 <HAL_GPIO_Init+0x1e8>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a3e      	ldr	r2, [pc, #248]	; (8000d68 <HAL_GPIO_Init+0x2c8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_Init+0x1e4>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a3d      	ldr	r2, [pc, #244]	; (8000d6c <HAL_GPIO_Init+0x2cc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d101      	bne.n	8000c80 <HAL_GPIO_Init+0x1e0>
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c80:	2304      	movs	r3, #4
 8000c82:	e004      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c90:	f002 0203 	and.w	r2, r2, #3
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	4093      	lsls	r3, r2
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c9e:	492f      	ldr	r1, [pc, #188]	; (8000d5c <HAL_GPIO_Init+0x2bc>)
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	492c      	ldr	r1, [pc, #176]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4928      	ldr	r1, [pc, #160]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	4922      	ldr	r1, [pc, #136]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	491e      	ldr	r1, [pc, #120]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	4918      	ldr	r1, [pc, #96]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4914      	ldr	r1, [pc, #80]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d021      	beq.n	8000d74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	490e      	ldr	r1, [pc, #56]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60cb      	str	r3, [r1, #12]
 8000d3c:	e021      	b.n	8000d82 <HAL_GPIO_Init+0x2e2>
 8000d3e:	bf00      	nop
 8000d40:	10320000 	.word	0x10320000
 8000d44:	10310000 	.word	0x10310000
 8000d48:	10220000 	.word	0x10220000
 8000d4c:	10210000 	.word	0x10210000
 8000d50:	10120000 	.word	0x10120000
 8000d54:	10110000 	.word	0x10110000
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010000 	.word	0x40010000
 8000d60:	40010800 	.word	0x40010800
 8000d64:	40010c00 	.word	0x40010c00
 8000d68:	40011000 	.word	0x40011000
 8000d6c:	40011400 	.word	0x40011400
 8000d70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4909      	ldr	r1, [pc, #36]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	3301      	adds	r3, #1
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f47f ae8e 	bne.w	8000ab4 <HAL_GPIO_Init+0x14>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	372c      	adds	r7, #44	; 0x2c
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40010400 	.word	0x40010400

08000da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
 8000db4:	4613      	mov	r3, r2
 8000db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db8:	787b      	ldrb	r3, [r7, #1]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dbe:	887a      	ldrh	r2, [r7, #2]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dc4:	e003      	b.n	8000dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	041a      	lsls	r2, r3, #16
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	611a      	str	r2, [r3, #16]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e26c      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 8087 	beq.w	8000f06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000df8:	4b92      	ldr	r3, [pc, #584]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 030c 	and.w	r3, r3, #12
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d00c      	beq.n	8000e1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e04:	4b8f      	ldr	r3, [pc, #572]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 030c 	and.w	r3, r3, #12
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d112      	bne.n	8000e36 <HAL_RCC_OscConfig+0x5e>
 8000e10:	4b8c      	ldr	r3, [pc, #560]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e1c:	d10b      	bne.n	8000e36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1e:	4b89      	ldr	r3, [pc, #548]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d06c      	beq.n	8000f04 <HAL_RCC_OscConfig+0x12c>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d168      	bne.n	8000f04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e246      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3e:	d106      	bne.n	8000e4e <HAL_RCC_OscConfig+0x76>
 8000e40:	4b80      	ldr	r3, [pc, #512]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a7f      	ldr	r2, [pc, #508]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	e02e      	b.n	8000eac <HAL_RCC_OscConfig+0xd4>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10c      	bne.n	8000e70 <HAL_RCC_OscConfig+0x98>
 8000e56:	4b7b      	ldr	r3, [pc, #492]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a7a      	ldr	r2, [pc, #488]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	4b78      	ldr	r3, [pc, #480]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a77      	ldr	r2, [pc, #476]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e01d      	b.n	8000eac <HAL_RCC_OscConfig+0xd4>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e78:	d10c      	bne.n	8000e94 <HAL_RCC_OscConfig+0xbc>
 8000e7a:	4b72      	ldr	r3, [pc, #456]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a71      	ldr	r2, [pc, #452]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	4b6f      	ldr	r3, [pc, #444]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a6e      	ldr	r2, [pc, #440]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	e00b      	b.n	8000eac <HAL_RCC_OscConfig+0xd4>
 8000e94:	4b6b      	ldr	r3, [pc, #428]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a6a      	ldr	r2, [pc, #424]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b68      	ldr	r3, [pc, #416]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a67      	ldr	r2, [pc, #412]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d013      	beq.n	8000edc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fc94 	bl	80007e0 <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ebc:	f7ff fc90 	bl	80007e0 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b64      	cmp	r3, #100	; 0x64
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e1fa      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ece:	4b5d      	ldr	r3, [pc, #372]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f0      	beq.n	8000ebc <HAL_RCC_OscConfig+0xe4>
 8000eda:	e014      	b.n	8000f06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fc80 	bl	80007e0 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee4:	f7ff fc7c 	bl	80007e0 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b64      	cmp	r3, #100	; 0x64
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e1e6      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef6:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f0      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x10c>
 8000f02:	e000      	b.n	8000f06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d063      	beq.n	8000fda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f12:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00b      	beq.n	8000f36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f1e:	4b49      	ldr	r3, [pc, #292]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	d11c      	bne.n	8000f64 <HAL_RCC_OscConfig+0x18c>
 8000f2a:	4b46      	ldr	r3, [pc, #280]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d116      	bne.n	8000f64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f36:	4b43      	ldr	r3, [pc, #268]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <HAL_RCC_OscConfig+0x176>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d001      	beq.n	8000f4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e1ba      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4e:	4b3d      	ldr	r3, [pc, #244]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	4939      	ldr	r1, [pc, #228]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f62:	e03a      	b.n	8000fda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d020      	beq.n	8000fae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f6c:	4b36      	ldr	r3, [pc, #216]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f72:	f7ff fc35 	bl	80007e0 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fc31 	bl	80007e0 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e19b      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f0      	beq.n	8000f7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	4927      	ldr	r1, [pc, #156]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	600b      	str	r3, [r1, #0]
 8000fac:	e015      	b.n	8000fda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <HAL_RCC_OscConfig+0x270>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fc14 	bl	80007e0 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fbc:	f7ff fc10 	bl	80007e0 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e17a      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f0      	bne.n	8000fbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d03a      	beq.n	800105c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d019      	beq.n	8001022 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_RCC_OscConfig+0x274>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff4:	f7ff fbf4 	bl	80007e0 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ffc:	f7ff fbf0 	bl	80007e0 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e15a      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_RCC_OscConfig+0x26c>)
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 fb08 	bl	8001630 <RCC_Delay>
 8001020:	e01c      	b.n	800105c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_RCC_OscConfig+0x274>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001028:	f7ff fbda 	bl	80007e0 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800102e:	e00f      	b.n	8001050 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001030:	f7ff fbd6 	bl	80007e0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d908      	bls.n	8001050 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e140      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000
 8001048:	42420000 	.word	0x42420000
 800104c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001050:	4b9e      	ldr	r3, [pc, #632]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1e9      	bne.n	8001030 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80a6 	beq.w	80011b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800106e:	4b97      	ldr	r3, [pc, #604]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10d      	bne.n	8001096 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	4b94      	ldr	r3, [pc, #592]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a93      	ldr	r2, [pc, #588]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b91      	ldr	r3, [pc, #580]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001092:	2301      	movs	r3, #1
 8001094:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001096:	4b8e      	ldr	r3, [pc, #568]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d118      	bne.n	80010d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a2:	4b8b      	ldr	r3, [pc, #556]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a8a      	ldr	r2, [pc, #552]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ae:	f7ff fb97 	bl	80007e0 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b6:	f7ff fb93 	bl	80007e0 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b64      	cmp	r3, #100	; 0x64
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e0fd      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c8:	4b81      	ldr	r3, [pc, #516]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d106      	bne.n	80010ea <HAL_RCC_OscConfig+0x312>
 80010dc:	4b7b      	ldr	r3, [pc, #492]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4a7a      	ldr	r2, [pc, #488]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6213      	str	r3, [r2, #32]
 80010e8:	e02d      	b.n	8001146 <HAL_RCC_OscConfig+0x36e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0x334>
 80010f2:	4b76      	ldr	r3, [pc, #472]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	4a75      	ldr	r2, [pc, #468]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6213      	str	r3, [r2, #32]
 80010fe:	4b73      	ldr	r3, [pc, #460]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a72      	ldr	r2, [pc, #456]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001104:	f023 0304 	bic.w	r3, r3, #4
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	e01c      	b.n	8001146 <HAL_RCC_OscConfig+0x36e>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b05      	cmp	r3, #5
 8001112:	d10c      	bne.n	800112e <HAL_RCC_OscConfig+0x356>
 8001114:	4b6d      	ldr	r3, [pc, #436]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4a6c      	ldr	r2, [pc, #432]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6213      	str	r3, [r2, #32]
 8001120:	4b6a      	ldr	r3, [pc, #424]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a69      	ldr	r2, [pc, #420]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6213      	str	r3, [r2, #32]
 800112c:	e00b      	b.n	8001146 <HAL_RCC_OscConfig+0x36e>
 800112e:	4b67      	ldr	r3, [pc, #412]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	4a66      	ldr	r2, [pc, #408]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	6213      	str	r3, [r2, #32]
 800113a:	4b64      	ldr	r3, [pc, #400]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	4a63      	ldr	r2, [pc, #396]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001140:	f023 0304 	bic.w	r3, r3, #4
 8001144:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d015      	beq.n	800117a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff fb47 	bl	80007e0 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001156:	f7ff fb43 	bl	80007e0 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	f241 3288 	movw	r2, #5000	; 0x1388
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e0ab      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800116c:	4b57      	ldr	r3, [pc, #348]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0ee      	beq.n	8001156 <HAL_RCC_OscConfig+0x37e>
 8001178:	e014      	b.n	80011a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117a:	f7ff fb31 	bl	80007e0 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001180:	e00a      	b.n	8001198 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001182:	f7ff fb2d 	bl	80007e0 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001190:	4293      	cmp	r3, r2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e095      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001198:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1ee      	bne.n	8001182 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d105      	bne.n	80011b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011aa:	4b48      	ldr	r3, [pc, #288]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a47      	ldr	r2, [pc, #284]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8081 	beq.w	80012c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c0:	4b42      	ldr	r3, [pc, #264]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d061      	beq.n	8001290 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d146      	bne.n	8001262 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d4:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <HAL_RCC_OscConfig+0x4fc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011da:	f7ff fb01 	bl	80007e0 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e2:	f7ff fafd 	bl	80007e0 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e067      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f4:	4b35      	ldr	r3, [pc, #212]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f0      	bne.n	80011e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001208:	d108      	bne.n	800121c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800120a:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	492d      	ldr	r1, [pc, #180]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001218:	4313      	orrs	r3, r2
 800121a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a19      	ldr	r1, [r3, #32]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	430b      	orrs	r3, r1
 800122e:	4927      	ldr	r1, [pc, #156]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <HAL_RCC_OscConfig+0x4fc>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fad1 	bl	80007e0 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001242:	f7ff facd 	bl	80007e0 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e037      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x46a>
 8001260:	e02f      	b.n	80012c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <HAL_RCC_OscConfig+0x4fc>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff faba 	bl	80007e0 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff fab6 	bl	80007e0 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e020      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x498>
 800128e:	e018      	b.n	80012c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e013      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_RCC_OscConfig+0x4f4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d106      	bne.n	80012be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40007000 	.word	0x40007000
 80012d4:	42420060 	.word	0x42420060

080012d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e0d0      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ec:	4b6a      	ldr	r3, [pc, #424]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d910      	bls.n	800131c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	4b67      	ldr	r3, [pc, #412]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 0207 	bic.w	r2, r3, #7
 8001302:	4965      	ldr	r1, [pc, #404]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b63      	ldr	r3, [pc, #396]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e0b8      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d020      	beq.n	800136a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001334:	4b59      	ldr	r3, [pc, #356]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a58      	ldr	r2, [pc, #352]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800133e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	2b00      	cmp	r3, #0
 800134a:	d005      	beq.n	8001358 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800134c:	4b53      	ldr	r3, [pc, #332]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001356:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001358:	4b50      	ldr	r3, [pc, #320]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	494d      	ldr	r1, [pc, #308]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d040      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d107      	bne.n	800138e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4b47      	ldr	r3, [pc, #284]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d115      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e07f      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d107      	bne.n	80013a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e073      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a6:	4b3d      	ldr	r3, [pc, #244]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e06b      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b6:	4b39      	ldr	r3, [pc, #228]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f023 0203 	bic.w	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4936      	ldr	r1, [pc, #216]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013c8:	f7ff fa0a 	bl	80007e0 <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d0:	f7ff fa06 	bl	80007e0 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	; 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e053      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 020c 	and.w	r2, r3, #12
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d1eb      	bne.n	80013d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d210      	bcs.n	8001428 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 0207 	bic.w	r2, r3, #7
 800140e:	4922      	ldr	r1, [pc, #136]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d001      	beq.n	8001428 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e032      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4916      	ldr	r1, [pc, #88]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	4313      	orrs	r3, r2
 8001444:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d009      	beq.n	8001466 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	490e      	ldr	r1, [pc, #56]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	4313      	orrs	r3, r2
 8001464:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001466:	f000 f821 	bl	80014ac <HAL_RCC_GetSysClockFreq>
 800146a:	4602      	mov	r2, r0
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	490a      	ldr	r1, [pc, #40]	; (80014a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001478:	5ccb      	ldrb	r3, [r1, r3]
 800147a:	fa22 f303 	lsr.w	r3, r2, r3
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe ffde 	bl	8000448 <HAL_InitTick>

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40022000 	.word	0x40022000
 800149c:	40021000 	.word	0x40021000
 80014a0:	08007464 	.word	0x08007464
 80014a4:	20000010 	.word	0x20000010
 80014a8:	20000014 	.word	0x20000014

080014ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014ac:	b490      	push	{r4, r7}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_RCC_GetSysClockFreq+0xb0>)
 80014b4:	1d3c      	adds	r4, r7, #4
 80014b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014bc:	f240 2301 	movw	r3, #513	; 0x201
 80014c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d002      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x40>
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d003      	beq.n	80014f2 <HAL_RCC_GetSysClockFreq+0x46>
 80014ea:	e02d      	b.n	8001548 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ee:	623b      	str	r3, [r7, #32]
      break;
 80014f0:	e02d      	b.n	800154e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	0c9b      	lsrs	r3, r3, #18
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014fe:	4413      	add	r3, r2
 8001500:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001504:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d013      	beq.n	8001538 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	0c5b      	lsrs	r3, r3, #17
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800151e:	4413      	add	r3, r2
 8001520:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001524:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_RCC_GetSysClockFreq+0xb8>)
 800152a:	fb02 f203 	mul.w	r2, r2, r3
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	fbb2 f3f3 	udiv	r3, r2, r3
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
 8001536:	e004      	b.n	8001542 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <HAL_RCC_GetSysClockFreq+0xbc>)
 800153c:	fb02 f303 	mul.w	r3, r2, r3
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	623b      	str	r3, [r7, #32]
      break;
 8001546:	e002      	b.n	800154e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_RCC_GetSysClockFreq+0xb8>)
 800154a:	623b      	str	r3, [r7, #32]
      break;
 800154c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800154e:	6a3b      	ldr	r3, [r7, #32]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bc90      	pop	{r4, r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	08007394 	.word	0x08007394
 8001560:	40021000 	.word	0x40021000
 8001564:	007a1200 	.word	0x007a1200
 8001568:	003d0900 	.word	0x003d0900

0800156c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001570:	4b02      	ldr	r3, [pc, #8]	; (800157c <HAL_RCC_GetHCLKFreq+0x10>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	20000010 	.word	0x20000010

08001580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001584:	f7ff fff2 	bl	800156c <HAL_RCC_GetHCLKFreq>
 8001588:	4602      	mov	r2, r0
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	0a1b      	lsrs	r3, r3, #8
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	4903      	ldr	r1, [pc, #12]	; (80015a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001596:	5ccb      	ldrb	r3, [r1, r3]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	08007474 	.word	0x08007474

080015a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015ac:	f7ff ffde 	bl	800156c <HAL_RCC_GetHCLKFreq>
 80015b0:	4602      	mov	r2, r0
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	0adb      	lsrs	r3, r3, #11
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	4903      	ldr	r1, [pc, #12]	; (80015cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80015be:	5ccb      	ldrb	r3, [r1, r3]
 80015c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000
 80015cc:	08007474 	.word	0x08007474

080015d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	220f      	movs	r2, #15
 80015de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_RCC_GetClockConfig+0x58>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0203 	and.w	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_RCC_GetClockConfig+0x58>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_RCC_GetClockConfig+0x58>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_RCC_GetClockConfig+0x58>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_RCC_GetClockConfig+0x5c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0207 	and.w	r2, r3, #7
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40021000 	.word	0x40021000
 800162c:	40022000 	.word	0x40022000

08001630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <RCC_Delay+0x34>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <RCC_Delay+0x38>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	0a5b      	lsrs	r3, r3, #9
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800164c:	bf00      	nop
  }
  while (Delay --);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	60fa      	str	r2, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f9      	bne.n	800164c <RCC_Delay+0x1c>
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	20000010 	.word	0x20000010
 8001668:	10624dd3 	.word	0x10624dd3

0800166c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e041      	b.n	8001702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f839 	bl	800170a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3304      	adds	r3, #4
 80016a8:	4619      	mov	r1, r3
 80016aa:	4610      	mov	r0, r2
 80016ac:	f000 f9b4 	bl	8001a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b01      	cmp	r3, #1
 800172e:	d001      	beq.n	8001734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e03a      	b.n	80017aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2202      	movs	r2, #2
 8001738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <HAL_TIM_Base_Start_IT+0x98>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d00e      	beq.n	8001774 <HAL_TIM_Base_Start_IT+0x58>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800175e:	d009      	beq.n	8001774 <HAL_TIM_Base_Start_IT+0x58>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d004      	beq.n	8001774 <HAL_TIM_Base_Start_IT+0x58>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a13      	ldr	r2, [pc, #76]	; (80017bc <HAL_TIM_Base_Start_IT+0xa0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d111      	bne.n	8001798 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b06      	cmp	r3, #6
 8001784:	d010      	beq.n	80017a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0201 	orr.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001796:	e007      	b.n	80017a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40012c00 	.word	0x40012c00
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40000800 	.word	0x40000800

080017c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d122      	bne.n	800181c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d11b      	bne.n	800181c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f06f 0202 	mvn.w	r2, #2
 80017ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f8ed 	bl	80019e2 <HAL_TIM_IC_CaptureCallback>
 8001808:	e005      	b.n	8001816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f8e0 	bl	80019d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f8ef 	bl	80019f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b04      	cmp	r3, #4
 8001828:	d122      	bne.n	8001870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b04      	cmp	r3, #4
 8001836:	d11b      	bne.n	8001870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 0204 	mvn.w	r2, #4
 8001840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2202      	movs	r2, #2
 8001846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f8c3 	bl	80019e2 <HAL_TIM_IC_CaptureCallback>
 800185c:	e005      	b.n	800186a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f8b6 	bl	80019d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f8c5 	bl	80019f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b08      	cmp	r3, #8
 800187c:	d122      	bne.n	80018c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b08      	cmp	r3, #8
 800188a:	d11b      	bne.n	80018c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0208 	mvn.w	r2, #8
 8001894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2204      	movs	r2, #4
 800189a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f899 	bl	80019e2 <HAL_TIM_IC_CaptureCallback>
 80018b0:	e005      	b.n	80018be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f88c 	bl	80019d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f89b 	bl	80019f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b10      	cmp	r3, #16
 80018d0:	d122      	bne.n	8001918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b10      	cmp	r3, #16
 80018de:	d11b      	bne.n	8001918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f06f 0210 	mvn.w	r2, #16
 80018e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2208      	movs	r2, #8
 80018ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f86f 	bl	80019e2 <HAL_TIM_IC_CaptureCallback>
 8001904:	e005      	b.n	8001912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f862 	bl	80019d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f871 	bl	80019f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d10e      	bne.n	8001944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0201 	mvn.w	r2, #1
 800193c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe fd32 	bl	80003a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	2b80      	cmp	r3, #128	; 0x80
 8001950:	d10e      	bne.n	8001970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195c:	2b80      	cmp	r3, #128	; 0x80
 800195e:	d107      	bne.n	8001970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f8bf 	bl	8001aee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d10e      	bne.n	800199c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001988:	2b40      	cmp	r3, #64	; 0x40
 800198a:	d107      	bne.n	800199c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f835 	bl	8001a06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	2b20      	cmp	r3, #32
 80019a8:	d10e      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b20      	cmp	r3, #32
 80019b6:	d107      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0220 	mvn.w	r2, #32
 80019c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f88a 	bl	8001adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr

08001a06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a29      	ldr	r2, [pc, #164]	; (8001ad0 <TIM_Base_SetConfig+0xb8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d00b      	beq.n	8001a48 <TIM_Base_SetConfig+0x30>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a36:	d007      	beq.n	8001a48 <TIM_Base_SetConfig+0x30>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <TIM_Base_SetConfig+0xbc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d003      	beq.n	8001a48 <TIM_Base_SetConfig+0x30>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <TIM_Base_SetConfig+0xc0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d108      	bne.n	8001a5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <TIM_Base_SetConfig+0xb8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00b      	beq.n	8001a7a <TIM_Base_SetConfig+0x62>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a68:	d007      	beq.n	8001a7a <TIM_Base_SetConfig+0x62>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <TIM_Base_SetConfig+0xbc>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d003      	beq.n	8001a7a <TIM_Base_SetConfig+0x62>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a18      	ldr	r2, [pc, #96]	; (8001ad8 <TIM_Base_SetConfig+0xc0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d108      	bne.n	8001a8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <TIM_Base_SetConfig+0xb8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d103      	bne.n	8001ac0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	615a      	str	r2, [r3, #20]
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40012c00 	.word	0x40012c00
 8001ad4:	40000400 	.word	0x40000400
 8001ad8:	40000800 	.word	0x40000800

08001adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e03f      	b.n	8001b92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7fe fd74 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2224      	movs	r2, #36	; 0x24
 8001b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fbdb 	bl	8002300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d130      	bne.n	8001c16 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_UART_Transmit_IT+0x26>
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e029      	b.n	8001c18 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_UART_Transmit_IT+0x38>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e022      	b.n	8001c18 <HAL_UART_Transmit_IT+0x7e>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	88fa      	ldrh	r2, [r7, #6]
 8001be4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2221      	movs	r2, #33	; 0x21
 8001bf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c10:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001c16:	2302      	movs	r3, #2
  }
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	d140      	bne.n	8001cbe <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_UART_Receive_IT+0x26>
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e039      	b.n	8001cc0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_UART_Receive_IT+0x38>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e032      	b.n	8001cc0 <HAL_UART_Receive_IT+0x9e>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2222      	movs	r2, #34	; 0x22
 8001c7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c98:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0220 	orr.w	r2, r2, #32
 8001cb8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
  }
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ce2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d02a      	beq.n	8001d58 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d10:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d013      	beq.n	8001d42 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_UART_AbortReceive_IT+0xac>)
 8001d20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fe44 	bl	80009b4 <HAL_DMA_Abort_IT>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01c      	beq.n	8001d6c <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4798      	blx	r3
 8001d40:	e014      	b.n	8001d6c <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f91c 	bl	8001f8e <HAL_UART_AbortReceiveCpltCallback>
 8001d56:	e009      	b.n	8001d6c <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f911 	bl	8001f8e <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	08002109 	.word	0x08002109

08001d7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10d      	bne.n	8001dce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_UART_IRQHandler+0x52>
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fa1a 	bl	8002200 <UART_Receive_IT>
      return;
 8001dcc:	e0d0      	b.n	8001f70 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80b0 	beq.w	8001f36 <HAL_UART_IRQHandler+0x1ba>
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <HAL_UART_IRQHandler+0x70>
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80a5 	beq.w	8001f36 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_UART_IRQHandler+0x90>
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_UART_IRQHandler+0xb0>
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	f043 0202 	orr.w	r2, r3, #2
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HAL_UART_IRQHandler+0xd0>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e44:	f043 0204 	orr.w	r2, r3, #4
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00f      	beq.n	8001e76 <HAL_UART_IRQHandler+0xfa>
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <HAL_UART_IRQHandler+0xee>
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	f043 0208 	orr.w	r2, r3, #8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d077      	beq.n	8001f6e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <HAL_UART_IRQHandler+0x11c>
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f9b4 	bl	8002200 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf14      	ite	ne
 8001ea6:	2301      	movne	r3, #1
 8001ea8:	2300      	moveq	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <HAL_UART_IRQHandler+0x144>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d031      	beq.n	8001f24 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f8f0 	bl	80020a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef0:	4a21      	ldr	r2, [pc, #132]	; (8001f78 <HAL_UART_IRQHandler+0x1fc>)
 8001ef2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fd5b 	bl	80009b4 <HAL_DMA_Abort_IT>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d016      	beq.n	8001f32 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f12:	e00e      	b.n	8001f32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f831 	bl	8001f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f1a:	e00a      	b.n	8001f32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f82d 	bl	8001f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f22:	e006      	b.n	8001f32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f829 	bl	8001f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001f30:	e01d      	b.n	8001f6e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f32:	bf00      	nop
    return;
 8001f34:	e01b      	b.n	8001f6e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_UART_IRQHandler+0x1d6>
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8f1 	bl	8002132 <UART_Transmit_IT>
    return;
 8001f50:	e00e      	b.n	8001f70 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <HAL_UART_IRQHandler+0x1f4>
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f932 	bl	80021d0 <UART_EndTransmit_IT>
    return;
 8001f6c:	e000      	b.n	8001f70 <HAL_UART_IRQHandler+0x1f4>
    return;
 8001f6e:	bf00      	nop
  }
}
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	080020e1 	.word	0x080020e1

08001f7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e020      	b.n	8001ffc <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2224      	movs	r2, #36	; 0x24
 8001fc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f023 030c 	bic.w	r3, r3, #12
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8002006:	b480      	push	{r7}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_HalfDuplex_EnableReceiver+0x1a>
 800201c:	2302      	movs	r3, #2
 800201e:	e020      	b.n	8002062 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2224      	movs	r2, #36	; 0x24
 800202c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 030c 	bic.w	r3, r3, #12
 800203e:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002082:	b2db      	uxtb	r3, r3
 8002084:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800208c:	b2db      	uxtb	r3, r3
 800208e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	4313      	orrs	r3, r2
 800209a:	b2db      	uxtb	r3, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr

080020a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80020bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f7ff ff3e 	bl	8001f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7ff ff32 	bl	8001f8e <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b21      	cmp	r3, #33	; 0x21
 8002144:	d13e      	bne.n	80021c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214e:	d114      	bne.n	800217a <UART_Transmit_IT+0x48>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d110      	bne.n	800217a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800216c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	1c9a      	adds	r2, r3, #2
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	621a      	str	r2, [r3, #32]
 8002178:	e008      	b.n	800218c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6211      	str	r1, [r2, #32]
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29b      	uxth	r3, r3
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4619      	mov	r1, r3
 800219a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10f      	bne.n	80021c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f004 ffd5 	bl	80071a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b22      	cmp	r3, #34	; 0x22
 8002212:	d170      	bne.n	80022f6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221c:	d117      	bne.n	800224e <UART_Receive_IT+0x4e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d113      	bne.n	800224e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	b29b      	uxth	r3, r3
 8002238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223c:	b29a      	uxth	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	1c9a      	adds	r2, r3, #2
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
 800224c:	e026      	b.n	800229c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002260:	d007      	beq.n	8002272 <UART_Receive_IT+0x72>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10a      	bne.n	8002280 <UART_Receive_IT+0x80>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	e008      	b.n	8002292 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4619      	mov	r1, r3
 80022aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d120      	bne.n	80022f2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0220 	bic.w	r2, r2, #32
 80022be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f004 ff97 	bl	800721c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e002      	b.n	80022f8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e000      	b.n	80022f8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80022f6:	2302      	movs	r3, #2
  }
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800233a:	f023 030c 	bic.w	r3, r3, #12
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	430b      	orrs	r3, r1
 8002346:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a2c      	ldr	r2, [pc, #176]	; (8002414 <UART_SetConfig+0x114>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d103      	bne.n	8002370 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002368:	f7ff f91e 	bl	80015a8 <HAL_RCC_GetPCLK2Freq>
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	e002      	b.n	8002376 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002370:	f7ff f906 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
 8002374:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	009a      	lsls	r2, r3, #2
 8002380:	441a      	add	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	4a22      	ldr	r2, [pc, #136]	; (8002418 <UART_SetConfig+0x118>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	0119      	lsls	r1, r3, #4
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	009a      	lsls	r2, r3, #2
 80023a0:	441a      	add	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <UART_SetConfig+0x118>)
 80023ae:	fba3 0302 	umull	r0, r3, r3, r2
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2064      	movs	r0, #100	; 0x64
 80023b6:	fb00 f303 	mul.w	r3, r0, r3
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	3332      	adds	r3, #50	; 0x32
 80023c0:	4a15      	ldr	r2, [pc, #84]	; (8002418 <UART_SetConfig+0x118>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023cc:	4419      	add	r1, r3
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	009a      	lsls	r2, r3, #2
 80023d8:	441a      	add	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <UART_SetConfig+0x118>)
 80023e6:	fba3 0302 	umull	r0, r3, r3, r2
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2064      	movs	r0, #100	; 0x64
 80023ee:	fb00 f303 	mul.w	r3, r0, r3
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	3332      	adds	r3, #50	; 0x32
 80023f8:	4a07      	ldr	r2, [pc, #28]	; (8002418 <UART_SetConfig+0x118>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	f003 020f 	and.w	r2, r3, #15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	440a      	add	r2, r1
 800240a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40013800 	.word	0x40013800
 8002418:	51eb851f 	.word	0x51eb851f

0800241c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002422:	f3ef 8305 	mrs	r3, IPSR
 8002426:	60bb      	str	r3, [r7, #8]
  return(result);
 8002428:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10f      	bne.n	800244e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800242e:	f3ef 8310 	mrs	r3, PRIMASK
 8002432:	607b      	str	r3, [r7, #4]
  return(result);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <osKernelInitialize+0x32>
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <osKernelInitialize+0x60>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d109      	bne.n	8002456 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002442:	f3ef 8311 	mrs	r3, BASEPRI
 8002446:	603b      	str	r3, [r7, #0]
  return(result);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800244e:	f06f 0305 	mvn.w	r3, #5
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e00c      	b.n	8002470 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <osKernelInitialize+0x60>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <osKernelInitialize+0x60>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e002      	b.n	8002470 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002470:	68fb      	ldr	r3, [r7, #12]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	2000003c 	.word	0x2000003c

08002480 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002486:	f3ef 8305 	mrs	r3, IPSR
 800248a:	60bb      	str	r3, [r7, #8]
  return(result);
 800248c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002492:	f3ef 8310 	mrs	r3, PRIMASK
 8002496:	607b      	str	r3, [r7, #4]
  return(result);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <osKernelStart+0x32>
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <osKernelStart+0x64>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d109      	bne.n	80024ba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024a6:	f3ef 8311 	mrs	r3, BASEPRI
 80024aa:	603b      	str	r3, [r7, #0]
  return(result);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80024b2:	f06f 0305 	mvn.w	r3, #5
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e00e      	b.n	80024d8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <osKernelStart+0x64>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <osKernelStart+0x64>)
 80024c4:	2202      	movs	r2, #2
 80024c6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80024c8:	f001 fbb2 	bl	8003c30 <vTaskStartScheduler>
      stat = osOK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e002      	b.n	80024d8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80024d8:	68fb      	ldr	r3, [r7, #12]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000003c 	.word	0x2000003c

080024e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b092      	sub	sp, #72	; 0x48
 80024ec:	af04      	add	r7, sp, #16
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024f8:	f3ef 8305 	mrs	r3, IPSR
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002500:	2b00      	cmp	r3, #0
 8002502:	f040 8094 	bne.w	800262e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002506:	f3ef 8310 	mrs	r3, PRIMASK
 800250a:	623b      	str	r3, [r7, #32]
  return(result);
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f040 808d 	bne.w	800262e <osThreadNew+0x146>
 8002514:	4b48      	ldr	r3, [pc, #288]	; (8002638 <osThreadNew+0x150>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d106      	bne.n	800252a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800251c:	f3ef 8311 	mrs	r3, BASEPRI
 8002520:	61fb      	str	r3, [r7, #28]
  return(result);
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 8082 	bne.w	800262e <osThreadNew+0x146>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d07e      	beq.n	800262e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002534:	2318      	movs	r3, #24
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002538:	2300      	movs	r3, #0
 800253a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800253c:	f107 031b 	add.w	r3, r7, #27
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d045      	beq.n	80025da <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <osThreadNew+0x74>
        name = attr->name;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <osThreadNew+0x9a>
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	2b38      	cmp	r3, #56	; 0x38
 8002574:	d805      	bhi.n	8002582 <osThreadNew+0x9a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <osThreadNew+0x9e>
        return (NULL);
 8002582:	2300      	movs	r3, #0
 8002584:	e054      	b.n	8002630 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00e      	beq.n	80025bc <osThreadNew+0xd4>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b5b      	cmp	r3, #91	; 0x5b
 80025a4:	d90a      	bls.n	80025bc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <osThreadNew+0xd4>
        mem = 1;
 80025b6:	2301      	movs	r3, #1
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ba:	e010      	b.n	80025de <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10c      	bne.n	80025de <osThreadNew+0xf6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d108      	bne.n	80025de <osThreadNew+0xf6>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d104      	bne.n	80025de <osThreadNew+0xf6>
          mem = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d8:	e001      	b.n	80025de <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80025de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d110      	bne.n	8002606 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025ec:	9202      	str	r2, [sp, #8]
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f001 f94c 	bl	8003898 <xTaskCreateStatic>
 8002600:	4603      	mov	r3, r0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e013      	b.n	800262e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	d110      	bne.n	800262e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	b29a      	uxth	r2, r3
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f001 f996 	bl	8003950 <xTaskCreate>
 8002624:	4603      	mov	r3, r0
 8002626:	2b01      	cmp	r3, #1
 8002628:	d001      	beq.n	800262e <osThreadNew+0x146>
          hTask = NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800262e:	697b      	ldr	r3, [r7, #20]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3738      	adds	r7, #56	; 0x38
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	2000003c 	.word	0x2000003c

0800263c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002644:	f3ef 8305 	mrs	r3, IPSR
 8002648:	613b      	str	r3, [r7, #16]
  return(result);
 800264a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10f      	bne.n	8002670 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002650:	f3ef 8310 	mrs	r3, PRIMASK
 8002654:	60fb      	str	r3, [r7, #12]
  return(result);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d109      	bne.n	8002670 <osDelay+0x34>
 800265c:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <osDelay+0x58>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d109      	bne.n	8002678 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002664:	f3ef 8311 	mrs	r3, BASEPRI
 8002668:	60bb      	str	r3, [r7, #8]
  return(result);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <osDelay+0x3c>
    stat = osErrorISR;
 8002670:	f06f 0305 	mvn.w	r3, #5
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e007      	b.n	8002688 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f001 faa0 	bl	8003bc8 <vTaskDelay>
    }
  }

  return (stat);
 8002688:	697b      	ldr	r3, [r7, #20]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2000003c 	.word	0x2000003c

08002698 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	; 0x30
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026a8:	f3ef 8305 	mrs	r3, IPSR
 80026ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80026ae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f040 8086 	bne.w	80027c2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026b6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ba:	617b      	str	r3, [r7, #20]
  return(result);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d17f      	bne.n	80027c2 <osSemaphoreNew+0x12a>
 80026c2:	4b42      	ldr	r3, [pc, #264]	; (80027cc <osSemaphoreNew+0x134>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d105      	bne.n	80026d6 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026ca:	f3ef 8311 	mrs	r3, BASEPRI
 80026ce:	613b      	str	r3, [r7, #16]
  return(result);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d175      	bne.n	80027c2 <osSemaphoreNew+0x12a>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d072      	beq.n	80027c2 <osSemaphoreNew+0x12a>
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d86e      	bhi.n	80027c2 <osSemaphoreNew+0x12a>
    mem = -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d015      	beq.n	800271c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <osSemaphoreNew+0x6e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b4f      	cmp	r3, #79	; 0x4f
 80026fe:	d902      	bls.n	8002706 <osSemaphoreNew+0x6e>
        mem = 1;
 8002700:	2301      	movs	r3, #1
 8002702:	623b      	str	r3, [r7, #32]
 8002704:	e00c      	b.n	8002720 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d108      	bne.n	8002720 <osSemaphoreNew+0x88>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <osSemaphoreNew+0x88>
          mem = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	e001      	b.n	8002720 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002726:	d04c      	beq.n	80027c2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d128      	bne.n	8002780 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10a      	bne.n	800274a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2203      	movs	r2, #3
 800273a:	9200      	str	r2, [sp, #0]
 800273c:	2200      	movs	r2, #0
 800273e:	2100      	movs	r1, #0
 8002740:	2001      	movs	r0, #1
 8002742:	f000 fa15 	bl	8002b70 <xQueueGenericCreateStatic>
 8002746:	6278      	str	r0, [r7, #36]	; 0x24
 8002748:	e005      	b.n	8002756 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800274a:	2203      	movs	r2, #3
 800274c:	2100      	movs	r1, #0
 800274e:	2001      	movs	r0, #1
 8002750:	f000 fa85 	bl	8002c5e <xQueueGenericCreate>
 8002754:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d022      	beq.n	80027a2 <osSemaphoreNew+0x10a>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d01f      	beq.n	80027a2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002762:	2300      	movs	r3, #0
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800276a:	f000 fb43 	bl	8002df4 <xQueueGenericSend>
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	d016      	beq.n	80027a2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8002774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002776:	f000 febf 	bl	80034f8 <vQueueDelete>
            hSemaphore = NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	e010      	b.n	80027a2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d108      	bne.n	8002798 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	461a      	mov	r2, r3
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fac6 	bl	8002d20 <xQueueCreateCountingSemaphoreStatic>
 8002794:	6278      	str	r0, [r7, #36]	; 0x24
 8002796:	e004      	b.n	80027a2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 faf7 	bl	8002d8e <xQueueCreateCountingSemaphore>
 80027a0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00c      	beq.n	80027c2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <osSemaphoreNew+0x11e>
          name = attr->name;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	e001      	b.n	80027ba <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80027ba:	69f9      	ldr	r1, [r7, #28]
 80027bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027be:	f000 ffe5 	bl	800378c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3728      	adds	r7, #40	; 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	2000003c 	.word	0x2000003c

080027d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027e0:	f3ef 8305 	mrs	r3, IPSR
 80027e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80027e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d16f      	bne.n	80028cc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ec:	f3ef 8310 	mrs	r3, PRIMASK
 80027f0:	617b      	str	r3, [r7, #20]
  return(result);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d169      	bne.n	80028cc <osMessageQueueNew+0xfc>
 80027f8:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <osMessageQueueNew+0x108>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d105      	bne.n	800280c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002800:	f3ef 8311 	mrs	r3, BASEPRI
 8002804:	613b      	str	r3, [r7, #16]
  return(result);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d15f      	bne.n	80028cc <osMessageQueueNew+0xfc>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d05c      	beq.n	80028cc <osMessageQueueNew+0xfc>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d059      	beq.n	80028cc <osMessageQueueNew+0xfc>
    mem = -1;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d029      	beq.n	8002878 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d012      	beq.n	8002852 <osMessageQueueNew+0x82>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b4f      	cmp	r3, #79	; 0x4f
 8002832:	d90e      	bls.n	8002852 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	429a      	cmp	r2, r3
 800284a:	d302      	bcc.n	8002852 <osMessageQueueNew+0x82>
        mem = 1;
 800284c:	2301      	movs	r3, #1
 800284e:	623b      	str	r3, [r7, #32]
 8002850:	e014      	b.n	800287c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d110      	bne.n	800287c <osMessageQueueNew+0xac>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10c      	bne.n	800287c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002866:	2b00      	cmp	r3, #0
 8002868:	d108      	bne.n	800287c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d104      	bne.n	800287c <osMessageQueueNew+0xac>
          mem = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
 8002876:	e001      	b.n	800287c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d10b      	bne.n	800289a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2100      	movs	r1, #0
 800288c:	9100      	str	r1, [sp, #0]
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f96d 	bl	8002b70 <xQueueGenericCreateStatic>
 8002896:	6278      	str	r0, [r7, #36]	; 0x24
 8002898:	e008      	b.n	80028ac <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80028a0:	2200      	movs	r2, #0
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f9da 	bl	8002c5e <xQueueGenericCreate>
 80028aa:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00c      	beq.n	80028cc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <osMessageQueueNew+0xf0>
        name = attr->name;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	e001      	b.n	80028c4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80028c4:	69f9      	ldr	r1, [r7, #28]
 80028c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028c8:	f000 ff60 	bl	800378c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2000003c 	.word	0x2000003c

080028dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a06      	ldr	r2, [pc, #24]	; (8002904 <vApplicationGetIdleTaskMemory+0x28>)
 80028ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4a05      	ldr	r2, [pc, #20]	; (8002908 <vApplicationGetIdleTaskMemory+0x2c>)
 80028f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	601a      	str	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	20000040 	.word	0x20000040
 8002908:	2000009c 	.word	0x2000009c

0800290c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a07      	ldr	r2, [pc, #28]	; (8002938 <vApplicationGetTimerTaskMemory+0x2c>)
 800291c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	4a06      	ldr	r2, [pc, #24]	; (800293c <vApplicationGetTimerTaskMemory+0x30>)
 8002922:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	2000029c 	.word	0x2000029c
 800293c:	200002f8 	.word	0x200002f8

08002940 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f103 0208 	add.w	r2, r3, #8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f103 0208 	add.w	r2, r3, #8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f103 0208 	add.w	r2, r3, #8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f2:	d103      	bne.n	80029fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e00c      	b.n	8002a16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3308      	adds	r3, #8
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e002      	b.n	8002a0a <vListInsert+0x2e>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d2f6      	bcs.n	8002a04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	601a      	str	r2, [r3, #0]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6892      	ldr	r2, [r2, #8]
 8002a62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6852      	ldr	r2, [r2, #4]
 8002a6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d103      	bne.n	8002a80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	1e5a      	subs	r2, r3, #1
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
	...

08002aa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ac6:	bf00      	nop
 8002ac8:	e7fe      	b.n	8002ac8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002aca:	f002 fd07 	bl	80054dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad6:	68f9      	ldr	r1, [r7, #12]
 8002ad8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	441a      	add	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	3b01      	subs	r3, #1
 8002afc:	68f9      	ldr	r1, [r7, #12]
 8002afe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	441a      	add	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	22ff      	movs	r2, #255	; 0xff
 8002b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	22ff      	movs	r2, #255	; 0xff
 8002b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d114      	bne.n	8002b4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01a      	beq.n	8002b5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3310      	adds	r3, #16
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f001 fb1b 	bl	8004168 <xTaskRemoveFromEventList>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d012      	beq.n	8002b5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <xQueueGenericReset+0xcc>)
 8002b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	e009      	b.n	8002b5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3310      	adds	r3, #16
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fef6 	bl	8002940 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3324      	adds	r3, #36	; 0x24
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fef1 	bl	8002940 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b5e:	f002 fced 	bl	800553c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	e000ed04 	.word	0xe000ed04

08002b70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08e      	sub	sp, #56	; 0x38
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <xQueueGenericCreateStatic+0x52>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <xQueueGenericCreateStatic+0x56>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <xQueueGenericCreateStatic+0x58>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	623b      	str	r3, [r7, #32]
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <xQueueGenericCreateStatic+0x7e>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <xQueueGenericCreateStatic+0x82>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <xQueueGenericCreateStatic+0x84>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	61fb      	str	r3, [r7, #28]
}
 8002c0a:	bf00      	nop
 8002c0c:	e7fe      	b.n	8002c0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c0e:	2350      	movs	r3, #80	; 0x50
 8002c10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b50      	cmp	r3, #80	; 0x50
 8002c16:	d00a      	beq.n	8002c2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	61bb      	str	r3, [r7, #24]
}
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00d      	beq.n	8002c54 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c40:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f843 	bl	8002cda <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3730      	adds	r7, #48	; 0x30
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b08a      	sub	sp, #40	; 0x28
 8002c62:	af02      	add	r7, sp, #8
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	613b      	str	r3, [r7, #16]
}
 8002c84:	bf00      	nop
 8002c86:	e7fe      	b.n	8002c86 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	e004      	b.n	8002c9e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3350      	adds	r3, #80	; 0x50
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 fd1a 	bl	80056dc <pvPortMalloc>
 8002ca8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00f      	beq.n	8002cd0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	3350      	adds	r3, #80	; 0x50
 8002cb4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cbe:	79fa      	ldrb	r2, [r7, #7]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f805 	bl	8002cda <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
	}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	e002      	b.n	8002cfc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d08:	2101      	movs	r1, #1
 8002d0a:	69b8      	ldr	r0, [r7, #24]
 8002d0c:	f7ff fec8 	bl	8002aa0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	61bb      	str	r3, [r7, #24]
}
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d90a      	bls.n	8002d66 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	617b      	str	r3, [r7, #20]
}
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002d66:	2302      	movs	r3, #2
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2100      	movs	r1, #0
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff fefd 	bl	8002b70 <xQueueGenericCreateStatic>
 8002d76:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002d84:	69fb      	ldr	r3, [r7, #28]
	}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3720      	adds	r7, #32
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10a      	bne.n	8002db4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	613b      	str	r3, [r7, #16]
}
 8002db0:	bf00      	nop
 8002db2:	e7fe      	b.n	8002db2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d90a      	bls.n	8002dd2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	60fb      	str	r3, [r7, #12]
}
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ff41 	bl	8002c5e <xQueueGenericCreate>
 8002ddc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002dea:	697b      	ldr	r3, [r7, #20]
	}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08e      	sub	sp, #56	; 0x38
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e02:	2300      	movs	r3, #0
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <xQueueGenericSend+0x32>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d103      	bne.n	8002e34 <xQueueGenericSend+0x40>
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <xQueueGenericSend+0x44>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <xQueueGenericSend+0x46>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10a      	bne.n	8002e54 <xQueueGenericSend+0x60>
	__asm volatile
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e50:	bf00      	nop
 8002e52:	e7fe      	b.n	8002e52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d103      	bne.n	8002e62 <xQueueGenericSend+0x6e>
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <xQueueGenericSend+0x72>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <xQueueGenericSend+0x74>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10a      	bne.n	8002e82 <xQueueGenericSend+0x8e>
	__asm volatile
 8002e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	623b      	str	r3, [r7, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	e7fe      	b.n	8002e80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e82:	f001 fb33 	bl	80044ec <xTaskGetSchedulerState>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <xQueueGenericSend+0x9e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <xQueueGenericSend+0xa2>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <xQueueGenericSend+0xa4>
 8002e96:	2300      	movs	r3, #0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	61fb      	str	r3, [r7, #28]
}
 8002eae:	bf00      	nop
 8002eb0:	e7fe      	b.n	8002eb0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eb2:	f002 fb13 	bl	80054dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <xQueueGenericSend+0xd4>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d129      	bne.n	8002f1c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ece:	f000 fb4d 	bl	800356c <prvCopyDataToQueue>
 8002ed2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d010      	beq.n	8002efe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	3324      	adds	r3, #36	; 0x24
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f001 f941 	bl	8004168 <xTaskRemoveFromEventList>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002eec:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <xQueueGenericSend+0x1f8>)
 8002eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	e00a      	b.n	8002f14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f04:	4b39      	ldr	r3, [pc, #228]	; (8002fec <xQueueGenericSend+0x1f8>)
 8002f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f14:	f002 fb12 	bl	800553c <vPortExitCritical>
				return pdPASS;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e063      	b.n	8002fe4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d103      	bne.n	8002f2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f22:	f002 fb0b 	bl	800553c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e05c      	b.n	8002fe4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d106      	bne.n	8002f3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	4618      	mov	r0, r3
 8002f36:	f001 f97b 	bl	8004230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f3e:	f002 fafd 	bl	800553c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f42:	f000 fedb 	bl	8003cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f46:	f002 fac9 	bl	80054dc <vPortEnterCritical>
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f50:	b25b      	sxtb	r3, r3
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f56:	d103      	bne.n	8002f60 <xQueueGenericSend+0x16c>
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f66:	b25b      	sxtb	r3, r3
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d103      	bne.n	8002f76 <xQueueGenericSend+0x182>
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f76:	f002 fae1 	bl	800553c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f7a:	1d3a      	adds	r2, r7, #4
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f001 f96a 	bl	800425c <xTaskCheckForTimeOut>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d124      	bne.n	8002fd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f90:	f000 fbe4 	bl	800375c <prvIsQueueFull>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d018      	beq.n	8002fcc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	3310      	adds	r3, #16
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 f890 	bl	80040c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002faa:	f000 fb6f 	bl	800368c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fae:	f000 feb3 	bl	8003d18 <xTaskResumeAll>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f af7c 	bne.w	8002eb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <xQueueGenericSend+0x1f8>)
 8002fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	e772      	b.n	8002eb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fce:	f000 fb5d 	bl	800368c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fd2:	f000 fea1 	bl	8003d18 <xTaskResumeAll>
 8002fd6:	e76c      	b.n	8002eb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fda:	f000 fb57 	bl	800368c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fde:	f000 fe9b 	bl	8003d18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fe2:	2300      	movs	r3, #0
		}
	}
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3738      	adds	r7, #56	; 0x38
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	e000ed04 	.word	0xe000ed04

08002ff0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08e      	sub	sp, #56	; 0x38
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10a      	bne.n	800301e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
}
 800301a:	bf00      	nop
 800301c:	e7fe      	b.n	800301c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d103      	bne.n	800302c <xQueueGenericSendFromISR+0x3c>
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <xQueueGenericSendFromISR+0x40>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <xQueueGenericSendFromISR+0x42>
 8003030:	2300      	movs	r3, #0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	623b      	str	r3, [r7, #32]
}
 8003048:	bf00      	nop
 800304a:	e7fe      	b.n	800304a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d103      	bne.n	800305a <xQueueGenericSendFromISR+0x6a>
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <xQueueGenericSendFromISR+0x6e>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <xQueueGenericSendFromISR+0x70>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	61fb      	str	r3, [r7, #28]
}
 8003076:	bf00      	nop
 8003078:	e7fe      	b.n	8003078 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800307a:	f002 faf1 	bl	8005660 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800307e:	f3ef 8211 	mrs	r2, BASEPRI
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	61ba      	str	r2, [r7, #24]
 8003094:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003096:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d302      	bcc.n	80030ac <xQueueGenericSendFromISR+0xbc>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d12c      	bne.n	8003106 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030bc:	f000 fa56 	bl	800356c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030c0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d112      	bne.n	80030f0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	3324      	adds	r3, #36	; 0x24
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 f846 	bl	8004168 <xTaskRemoveFromEventList>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00e      	beq.n	8003100 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e007      	b.n	8003100 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030f4:	3301      	adds	r3, #1
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	b25a      	sxtb	r2, r3
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003100:	2301      	movs	r3, #1
 8003102:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003104:	e001      	b.n	800310a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003106:	2300      	movs	r3, #0
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003114:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003118:	4618      	mov	r0, r3
 800311a:	3738      	adds	r7, #56	; 0x38
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08c      	sub	sp, #48	; 0x30
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800312c:	2300      	movs	r3, #0
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <xQueueReceive+0x30>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	623b      	str	r3, [r7, #32]
}
 800314c:	bf00      	nop
 800314e:	e7fe      	b.n	800314e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <xQueueReceive+0x3e>
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <xQueueReceive+0x42>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <xQueueReceive+0x44>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <xQueueReceive+0x5e>
	__asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	61fb      	str	r3, [r7, #28]
}
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800317e:	f001 f9b5 	bl	80044ec <xTaskGetSchedulerState>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <xQueueReceive+0x6e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <xQueueReceive+0x72>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <xQueueReceive+0x74>
 8003192:	2300      	movs	r3, #0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10a      	bne.n	80031ae <xQueueReceive+0x8e>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	61bb      	str	r3, [r7, #24]
}
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80031ae:	f002 f995 	bl	80054dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01f      	beq.n	80031fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c2:	f000 fa3d 	bl	8003640 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	1e5a      	subs	r2, r3, #1
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00f      	beq.n	80031f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	3310      	adds	r3, #16
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 ffc4 	bl	8004168 <xTaskRemoveFromEventList>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031e6:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <xQueueReceive+0x1bc>)
 80031e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031f6:	f002 f9a1 	bl	800553c <vPortExitCritical>
				return pdPASS;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e069      	b.n	80032d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d103      	bne.n	800320c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003204:	f002 f99a 	bl	800553c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003208:	2300      	movs	r3, #0
 800320a:	e062      	b.n	80032d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003212:	f107 0310 	add.w	r3, r7, #16
 8003216:	4618      	mov	r0, r3
 8003218:	f001 f80a 	bl	8004230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800321c:	2301      	movs	r3, #1
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003220:	f002 f98c 	bl	800553c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003224:	f000 fd6a 	bl	8003cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003228:	f002 f958 	bl	80054dc <vPortEnterCritical>
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003232:	b25b      	sxtb	r3, r3
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d103      	bne.n	8003242 <xQueueReceive+0x122>
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003248:	b25b      	sxtb	r3, r3
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d103      	bne.n	8003258 <xQueueReceive+0x138>
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003258:	f002 f970 	bl	800553c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800325c:	1d3a      	adds	r2, r7, #4
 800325e:	f107 0310 	add.w	r3, r7, #16
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fff9 	bl	800425c <xTaskCheckForTimeOut>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d123      	bne.n	80032b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003272:	f000 fa5d 	bl	8003730 <prvIsQueueEmpty>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d017      	beq.n	80032ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	3324      	adds	r3, #36	; 0x24
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f000 ff1f 	bl	80040c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800328a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800328c:	f000 f9fe 	bl	800368c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003290:	f000 fd42 	bl	8003d18 <xTaskResumeAll>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d189      	bne.n	80031ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800329a:	4b10      	ldr	r3, [pc, #64]	; (80032dc <xQueueReceive+0x1bc>)
 800329c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	e780      	b.n	80031ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ae:	f000 f9ed 	bl	800368c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032b2:	f000 fd31 	bl	8003d18 <xTaskResumeAll>
 80032b6:	e77a      	b.n	80031ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ba:	f000 f9e7 	bl	800368c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032be:	f000 fd2b 	bl	8003d18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c4:	f000 fa34 	bl	8003730 <prvIsQueueEmpty>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f43f af6f 	beq.w	80031ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3730      	adds	r7, #48	; 0x30
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	e000ed04 	.word	0xe000ed04

080032e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08e      	sub	sp, #56	; 0x38
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	623b      	str	r3, [r7, #32]
}
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	61fb      	str	r3, [r7, #28]
}
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003330:	f001 f8dc 	bl	80044ec <xTaskGetSchedulerState>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <xQueueSemaphoreTake+0x60>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <xQueueSemaphoreTake+0x64>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <xQueueSemaphoreTake+0x66>
 8003344:	2300      	movs	r3, #0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	61bb      	str	r3, [r7, #24]
}
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003360:	f002 f8bc 	bl	80054dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d024      	beq.n	80033ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	1e5a      	subs	r2, r3, #1
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d104      	bne.n	800338a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003380:	f001 fa34 	bl	80047ec <pvTaskIncrementMutexHeldCount>
 8003384:	4602      	mov	r2, r0
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00f      	beq.n	80033b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	3310      	adds	r3, #16
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fee6 	bl	8004168 <xTaskRemoveFromEventList>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033a2:	4b54      	ldr	r3, [pc, #336]	; (80034f4 <xQueueSemaphoreTake+0x214>)
 80033a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033b2:	f002 f8c3 	bl	800553c <vPortExitCritical>
				return pdPASS;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e097      	b.n	80034ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d111      	bne.n	80033e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	617b      	str	r3, [r7, #20]
}
 80033d8:	bf00      	nop
 80033da:	e7fe      	b.n	80033da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80033dc:	f002 f8ae 	bl	800553c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e082      	b.n	80034ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 ff1e 	bl	8004230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033f4:	2301      	movs	r3, #1
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033f8:	f002 f8a0 	bl	800553c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033fc:	f000 fc7e 	bl	8003cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003400:	f002 f86c 	bl	80054dc <vPortEnterCritical>
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800340a:	b25b      	sxtb	r3, r3
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d103      	bne.n	800341a <xQueueSemaphoreTake+0x13a>
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003420:	b25b      	sxtb	r3, r3
 8003422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003426:	d103      	bne.n	8003430 <xQueueSemaphoreTake+0x150>
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003430:	f002 f884 	bl	800553c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003434:	463a      	mov	r2, r7
 8003436:	f107 030c 	add.w	r3, r7, #12
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f000 ff0d 	bl	800425c <xTaskCheckForTimeOut>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d132      	bne.n	80034ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003448:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800344a:	f000 f971 	bl	8003730 <prvIsQueueEmpty>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d026      	beq.n	80034a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800345c:	f002 f83e 	bl	80054dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4618      	mov	r0, r3
 8003466:	f001 f85f 	bl	8004528 <xTaskPriorityInherit>
 800346a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800346c:	f002 f866 	bl	800553c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003472:	3324      	adds	r3, #36	; 0x24
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fe25 	bl	80040c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800347e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003480:	f000 f904 	bl	800368c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003484:	f000 fc48 	bl	8003d18 <xTaskResumeAll>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	f47f af68 	bne.w	8003360 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003490:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <xQueueSemaphoreTake+0x214>)
 8003492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	e75e      	b.n	8003360 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80034a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034a4:	f000 f8f2 	bl	800368c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034a8:	f000 fc36 	bl	8003d18 <xTaskResumeAll>
 80034ac:	e758      	b.n	8003360 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80034ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034b0:	f000 f8ec 	bl	800368c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034b4:	f000 fc30 	bl	8003d18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034ba:	f000 f939 	bl	8003730 <prvIsQueueEmpty>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f43f af4d 	beq.w	8003360 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00d      	beq.n	80034e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80034cc:	f002 f806 	bl	80054dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80034d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034d2:	f000 f834 	bl	800353e <prvGetDisinheritPriorityAfterTimeout>
 80034d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80034d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 f8fe 	bl	80046e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80034e4:	f002 f82a 	bl	800553c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3738      	adds	r7, #56	; 0x38
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	e000ed04 	.word	0xe000ed04

080034f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <vQueueDelete+0x28>
	__asm volatile
 800350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	60bb      	str	r3, [r7, #8]
}
 800351c:	bf00      	nop
 800351e:	e7fe      	b.n	800351e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f95b 	bl	80037dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f002 f997 	bl	8005864 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800353e:	b480      	push	{r7}
 8003540:	b085      	sub	sp, #20
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	e001      	b.n	8003560 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003560:	68fb      	ldr	r3, [r7, #12]
	}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10d      	bne.n	80035a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d14d      	bne.n	800362e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4618      	mov	r0, r3
 8003598:	f001 f834 	bl	8004604 <xTaskPriorityDisinherit>
 800359c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	e043      	b.n	800362e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d119      	bne.n	80035e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6898      	ldr	r0, [r3, #8]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	461a      	mov	r2, r3
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	f003 febe 	bl	8007338 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	441a      	add	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d32b      	bcc.n	800362e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	e026      	b.n	800362e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68d8      	ldr	r0, [r3, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	461a      	mov	r2, r3
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	f003 fea4 	bl	8007338 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	425b      	negs	r3, r3
 80035fa:	441a      	add	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d207      	bcs.n	800361c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	425b      	negs	r3, r3
 8003616:	441a      	add	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d105      	bne.n	800362e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	3b01      	subs	r3, #1
 800362c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003636:	697b      	ldr	r3, [r7, #20]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d018      	beq.n	8003684 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	441a      	add	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d303      	bcc.n	8003674 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68d9      	ldr	r1, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	461a      	mov	r2, r3
 800367e:	6838      	ldr	r0, [r7, #0]
 8003680:	f003 fe5a 	bl	8007338 <memcpy>
	}
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003694:	f001 ff22 	bl	80054dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800369e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036a0:	e011      	b.n	80036c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d012      	beq.n	80036d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3324      	adds	r3, #36	; 0x24
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fd5a 	bl	8004168 <xTaskRemoveFromEventList>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036ba:	f000 fe31 	bl	8004320 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	dce9      	bgt.n	80036a2 <prvUnlockQueue+0x16>
 80036ce:	e000      	b.n	80036d2 <prvUnlockQueue+0x46>
					break;
 80036d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	22ff      	movs	r2, #255	; 0xff
 80036d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036da:	f001 ff2f 	bl	800553c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036de:	f001 fefd 	bl	80054dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036ea:	e011      	b.n	8003710 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d012      	beq.n	800371a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3310      	adds	r3, #16
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fd35 	bl	8004168 <xTaskRemoveFromEventList>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003704:	f000 fe0c 	bl	8004320 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003708:	7bbb      	ldrb	r3, [r7, #14]
 800370a:	3b01      	subs	r3, #1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003714:	2b00      	cmp	r3, #0
 8003716:	dce9      	bgt.n	80036ec <prvUnlockQueue+0x60>
 8003718:	e000      	b.n	800371c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800371a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	22ff      	movs	r2, #255	; 0xff
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003724:	f001 ff0a 	bl	800553c <vPortExitCritical>
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003738:	f001 fed0 	bl	80054dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003744:	2301      	movs	r3, #1
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e001      	b.n	800374e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800374e:	f001 fef5 	bl	800553c <vPortExitCritical>

	return xReturn;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003764:	f001 feba 	bl	80054dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	429a      	cmp	r2, r3
 8003772:	d102      	bne.n	800377a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003774:	2301      	movs	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e001      	b.n	800377e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800377e:	f001 fedd 	bl	800553c <vPortExitCritical>

	return xReturn;
 8003782:	68fb      	ldr	r3, [r7, #12]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e014      	b.n	80037c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800379c:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <vQueueAddToRegistry+0x4c>)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037a8:	490b      	ldr	r1, [pc, #44]	; (80037d8 <vQueueAddToRegistry+0x4c>)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <vQueueAddToRegistry+0x4c>)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80037be:	e006      	b.n	80037ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3301      	adds	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b07      	cmp	r3, #7
 80037ca:	d9e7      	bls.n	800379c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	20001b68 	.word	0x20001b68

080037dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	e016      	b.n	8003818 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80037ea:	4a10      	ldr	r2, [pc, #64]	; (800382c <vQueueUnregisterQueue+0x50>)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4413      	add	r3, r2
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d10b      	bne.n	8003812 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80037fa:	4a0c      	ldr	r2, [pc, #48]	; (800382c <vQueueUnregisterQueue+0x50>)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2100      	movs	r1, #0
 8003800:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <vQueueUnregisterQueue+0x50>)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	2200      	movs	r2, #0
 800380e:	605a      	str	r2, [r3, #4]
				break;
 8003810:	e006      	b.n	8003820 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3301      	adds	r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b07      	cmp	r3, #7
 800381c:	d9e5      	bls.n	80037ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800381e:	bf00      	nop
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20001b68 	.word	0x20001b68

08003830 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003840:	f001 fe4c 	bl	80054dc <vPortEnterCritical>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800384a:	b25b      	sxtb	r3, r3
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d103      	bne.n	800385a <vQueueWaitForMessageRestricted+0x2a>
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003860:	b25b      	sxtb	r3, r3
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d103      	bne.n	8003870 <vQueueWaitForMessageRestricted+0x40>
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003870:	f001 fe64 	bl	800553c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	3324      	adds	r3, #36	; 0x24
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fc43 	bl	8004110 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800388a:	6978      	ldr	r0, [r7, #20]
 800388c:	f7ff fefe 	bl	800368c <prvUnlockQueue>
	}
 8003890:	bf00      	nop
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08e      	sub	sp, #56	; 0x38
 800389c:	af04      	add	r7, sp, #16
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	623b      	str	r3, [r7, #32]
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <xTaskCreateStatic+0x46>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	61fb      	str	r3, [r7, #28]
}
 80038da:	bf00      	nop
 80038dc:	e7fe      	b.n	80038dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038de:	235c      	movs	r3, #92	; 0x5c
 80038e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b5c      	cmp	r3, #92	; 0x5c
 80038e6:	d00a      	beq.n	80038fe <xTaskCreateStatic+0x66>
	__asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	61bb      	str	r3, [r7, #24]
}
 80038fa:	bf00      	nop
 80038fc:	e7fe      	b.n	80038fc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01e      	beq.n	8003942 <xTaskCreateStatic+0xaa>
 8003904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003906:	2b00      	cmp	r3, #0
 8003908:	d01b      	beq.n	8003942 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003912:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	2202      	movs	r2, #2
 8003918:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800391c:	2300      	movs	r3, #0
 800391e:	9303      	str	r3, [sp, #12]
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	9302      	str	r3, [sp, #8]
 8003924:	f107 0314 	add.w	r3, r7, #20
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f850 	bl	80039da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800393a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800393c:	f000 f8d4 	bl	8003ae8 <prvAddNewTaskToReadyList>
 8003940:	e001      	b.n	8003946 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003946:	697b      	ldr	r3, [r7, #20]
	}
 8003948:	4618      	mov	r0, r3
 800394a:	3728      	adds	r7, #40	; 0x28
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08c      	sub	sp, #48	; 0x30
 8003954:	af04      	add	r7, sp, #16
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	4613      	mov	r3, r2
 800395e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4618      	mov	r0, r3
 8003966:	f001 feb9 	bl	80056dc <pvPortMalloc>
 800396a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00e      	beq.n	8003990 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003972:	205c      	movs	r0, #92	; 0x5c
 8003974:	f001 feb2 	bl	80056dc <pvPortMalloc>
 8003978:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
 8003986:	e005      	b.n	8003994 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003988:	6978      	ldr	r0, [r7, #20]
 800398a:	f001 ff6b 	bl	8005864 <vPortFree>
 800398e:	e001      	b.n	8003994 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d017      	beq.n	80039ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	2300      	movs	r3, #0
 80039a6:	9303      	str	r3, [sp, #12]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	9302      	str	r3, [sp, #8]
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f80e 	bl	80039da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039be:	69f8      	ldr	r0, [r7, #28]
 80039c0:	f000 f892 	bl	8003ae8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039c4:	2301      	movs	r3, #1
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	e002      	b.n	80039d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295
 80039ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039d0:	69bb      	ldr	r3, [r7, #24]
	}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b088      	sub	sp, #32
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	461a      	mov	r2, r3
 80039f2:	21a5      	movs	r1, #165	; 0xa5
 80039f4:	f003 fcae 	bl	8007354 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a02:	3b01      	subs	r3, #1
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	f023 0307 	bic.w	r3, r3, #7
 8003a10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	617b      	str	r3, [r7, #20]
}
 8003a2e:	bf00      	nop
 8003a30:	e7fe      	b.n	8003a30 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	e012      	b.n	8003a5e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	7819      	ldrb	r1, [r3, #0]
 8003a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	3334      	adds	r3, #52	; 0x34
 8003a48:	460a      	mov	r2, r1
 8003a4a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d006      	beq.n	8003a66 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	2b0f      	cmp	r3, #15
 8003a62:	d9e9      	bls.n	8003a38 <prvInitialiseNewTask+0x5e>
 8003a64:	e000      	b.n	8003a68 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003a66:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	2b37      	cmp	r3, #55	; 0x37
 8003a74:	d901      	bls.n	8003a7a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a76:	2337      	movs	r3, #55	; 0x37
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	2200      	movs	r2, #0
 8003a8a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe ff74 	bl	800297e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	3318      	adds	r3, #24
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe ff6f 	bl	800297e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	2200      	movs	r2, #0
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	68f9      	ldr	r1, [r7, #12]
 8003ac8:	69b8      	ldr	r0, [r7, #24]
 8003aca:	f001 fc13 	bl	80052f4 <pxPortInitialiseStack>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ae0:	bf00      	nop
 8003ae2:	3720      	adds	r7, #32
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003af0:	f001 fcf4 	bl	80054dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003af4:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <prvAddNewTaskToReadyList+0xc4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	4a2c      	ldr	r2, [pc, #176]	; (8003bac <prvAddNewTaskToReadyList+0xc4>)
 8003afc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003afe:	4b2c      	ldr	r3, [pc, #176]	; (8003bb0 <prvAddNewTaskToReadyList+0xc8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b06:	4a2a      	ldr	r2, [pc, #168]	; (8003bb0 <prvAddNewTaskToReadyList+0xc8>)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b0c:	4b27      	ldr	r3, [pc, #156]	; (8003bac <prvAddNewTaskToReadyList+0xc4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d110      	bne.n	8003b36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b14:	f000 fc28 	bl	8004368 <prvInitialiseTaskLists>
 8003b18:	e00d      	b.n	8003b36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b1a:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <prvAddNewTaskToReadyList+0xcc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b22:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <prvAddNewTaskToReadyList+0xc8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d802      	bhi.n	8003b36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b30:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <prvAddNewTaskToReadyList+0xc8>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b36:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <prvAddNewTaskToReadyList+0xd0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <prvAddNewTaskToReadyList+0xd0>)
 8003b3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b40:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <prvAddNewTaskToReadyList+0xd0>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <prvAddNewTaskToReadyList+0xd4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d903      	bls.n	8003b5c <prvAddNewTaskToReadyList+0x74>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <prvAddNewTaskToReadyList+0xd4>)
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <prvAddNewTaskToReadyList+0xd8>)
 8003b6a:	441a      	add	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f7fe ff0f 	bl	8002996 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b78:	f001 fce0 	bl	800553c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b7c:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <prvAddNewTaskToReadyList+0xcc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00e      	beq.n	8003ba2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b84:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <prvAddNewTaskToReadyList+0xc8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d207      	bcs.n	8003ba2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <prvAddNewTaskToReadyList+0xdc>)
 8003b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000bcc 	.word	0x20000bcc
 8003bb0:	200006f8 	.word	0x200006f8
 8003bb4:	20000bd8 	.word	0x20000bd8
 8003bb8:	20000be8 	.word	0x20000be8
 8003bbc:	20000bd4 	.word	0x20000bd4
 8003bc0:	200006fc 	.word	0x200006fc
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d017      	beq.n	8003c0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <vTaskDelay+0x60>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <vTaskDelay+0x30>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	60bb      	str	r3, [r7, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003bf8:	f000 f880 	bl	8003cfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 ffbe 	bl	8004b80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c04:	f000 f888 	bl	8003d18 <xTaskResumeAll>
 8003c08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d107      	bne.n	8003c20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <vTaskDelay+0x64>)
 8003c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000bf4 	.word	0x20000bf4
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	; 0x28
 8003c34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c3e:	463a      	mov	r2, r7
 8003c40:	1d39      	adds	r1, r7, #4
 8003c42:	f107 0308 	add.w	r3, r7, #8
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fe48 	bl	80028dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c4c:	6839      	ldr	r1, [r7, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	9202      	str	r2, [sp, #8]
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	2300      	movs	r3, #0
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	460a      	mov	r2, r1
 8003c5e:	4921      	ldr	r1, [pc, #132]	; (8003ce4 <vTaskStartScheduler+0xb4>)
 8003c60:	4821      	ldr	r0, [pc, #132]	; (8003ce8 <vTaskStartScheduler+0xb8>)
 8003c62:	f7ff fe19 	bl	8003898 <xTaskCreateStatic>
 8003c66:	4603      	mov	r3, r0
 8003c68:	4a20      	ldr	r2, [pc, #128]	; (8003cec <vTaskStartScheduler+0xbc>)
 8003c6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c6c:	4b1f      	ldr	r3, [pc, #124]	; (8003cec <vTaskStartScheduler+0xbc>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c74:	2301      	movs	r3, #1
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	e001      	b.n	8003c7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d102      	bne.n	8003c8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c84:	f000 ffd0 	bl	8004c28 <xTimerCreateTimerTask>
 8003c88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d116      	bne.n	8003cbe <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	613b      	str	r3, [r7, #16]
}
 8003ca2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <vTaskStartScheduler+0xc0>)
 8003ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8003caa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cac:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <vTaskStartScheduler+0xc4>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <vTaskStartScheduler+0xc8>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cb8:	f001 fb9e 	bl	80053f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cbc:	e00e      	b.n	8003cdc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d10a      	bne.n	8003cdc <vTaskStartScheduler+0xac>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	60fb      	str	r3, [r7, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	e7fe      	b.n	8003cda <vTaskStartScheduler+0xaa>
}
 8003cdc:	bf00      	nop
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	080073a4 	.word	0x080073a4
 8003ce8:	08004339 	.word	0x08004339
 8003cec:	20000bf0 	.word	0x20000bf0
 8003cf0:	20000bec 	.word	0x20000bec
 8003cf4:	20000bd8 	.word	0x20000bd8
 8003cf8:	20000bd0 	.word	0x20000bd0

08003cfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <vTaskSuspendAll+0x18>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	4a03      	ldr	r2, [pc, #12]	; (8003d14 <vTaskSuspendAll+0x18>)
 8003d08:	6013      	str	r3, [r2, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000bf4 	.word	0x20000bf4

08003d18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d26:	4b42      	ldr	r3, [pc, #264]	; (8003e30 <xTaskResumeAll+0x118>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <xTaskResumeAll+0x2c>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	603b      	str	r3, [r7, #0]
}
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d44:	f001 fbca 	bl	80054dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d48:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <xTaskResumeAll+0x118>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	4a38      	ldr	r2, [pc, #224]	; (8003e30 <xTaskResumeAll+0x118>)
 8003d50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d52:	4b37      	ldr	r3, [pc, #220]	; (8003e30 <xTaskResumeAll+0x118>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d162      	bne.n	8003e20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d5a:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <xTaskResumeAll+0x11c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d05e      	beq.n	8003e20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d62:	e02f      	b.n	8003dc4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d64:	4b34      	ldr	r3, [pc, #208]	; (8003e38 <xTaskResumeAll+0x120>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3318      	adds	r3, #24
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe fe6b 	bl	8002a4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fe66 	bl	8002a4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d84:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <xTaskResumeAll+0x124>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d903      	bls.n	8003d94 <xTaskResumeAll+0x7c>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4a2a      	ldr	r2, [pc, #168]	; (8003e3c <xTaskResumeAll+0x124>)
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4a27      	ldr	r2, [pc, #156]	; (8003e40 <xTaskResumeAll+0x128>)
 8003da2:	441a      	add	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3304      	adds	r3, #4
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f7fe fdf3 	bl	8002996 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <xTaskResumeAll+0x12c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003dbe:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <xTaskResumeAll+0x130>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dc4:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <xTaskResumeAll+0x120>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1cb      	bne.n	8003d64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dd2:	f000 fb67 	bl	80044a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <xTaskResumeAll+0x134>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d010      	beq.n	8003e04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003de2:	f000 f857 	bl	8003e94 <xTaskIncrementTick>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003dec:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <xTaskResumeAll+0x130>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f1      	bne.n	8003de2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003dfe:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <xTaskResumeAll+0x134>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e04:	4b10      	ldr	r3, [pc, #64]	; (8003e48 <xTaskResumeAll+0x130>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <xTaskResumeAll+0x138>)
 8003e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e20:	f001 fb8c 	bl	800553c <vPortExitCritical>

	return xAlreadyYielded;
 8003e24:	68bb      	ldr	r3, [r7, #8]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000bf4 	.word	0x20000bf4
 8003e34:	20000bcc 	.word	0x20000bcc
 8003e38:	20000b8c 	.word	0x20000b8c
 8003e3c:	20000bd4 	.word	0x20000bd4
 8003e40:	200006fc 	.word	0x200006fc
 8003e44:	200006f8 	.word	0x200006f8
 8003e48:	20000be0 	.word	0x20000be0
 8003e4c:	20000bdc 	.word	0x20000bdc
 8003e50:	e000ed04 	.word	0xe000ed04

08003e54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e5a:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <xTaskGetTickCount+0x18>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e60:	687b      	ldr	r3, [r7, #4]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	20000bd0 	.word	0x20000bd0

08003e70 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e76:	f001 fbf3 	bl	8005660 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003e7e:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <xTaskGetTickCountFromISR+0x20>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e84:	683b      	ldr	r3, [r7, #0]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000bd0 	.word	0x20000bd0

08003e94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e9e:	4b51      	ldr	r3, [pc, #324]	; (8003fe4 <xTaskIncrementTick+0x150>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f040 808e 	bne.w	8003fc4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ea8:	4b4f      	ldr	r3, [pc, #316]	; (8003fe8 <xTaskIncrementTick+0x154>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003eb0:	4a4d      	ldr	r2, [pc, #308]	; (8003fe8 <xTaskIncrementTick+0x154>)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d120      	bne.n	8003efe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ebc:	4b4b      	ldr	r3, [pc, #300]	; (8003fec <xTaskIncrementTick+0x158>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <xTaskIncrementTick+0x48>
	__asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	603b      	str	r3, [r7, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	e7fe      	b.n	8003eda <xTaskIncrementTick+0x46>
 8003edc:	4b43      	ldr	r3, [pc, #268]	; (8003fec <xTaskIncrementTick+0x158>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	4b43      	ldr	r3, [pc, #268]	; (8003ff0 <xTaskIncrementTick+0x15c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a41      	ldr	r2, [pc, #260]	; (8003fec <xTaskIncrementTick+0x158>)
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4a41      	ldr	r2, [pc, #260]	; (8003ff0 <xTaskIncrementTick+0x15c>)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <xTaskIncrementTick+0x160>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	4a3f      	ldr	r2, [pc, #252]	; (8003ff4 <xTaskIncrementTick+0x160>)
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	f000 fad3 	bl	80044a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003efe:	4b3e      	ldr	r3, [pc, #248]	; (8003ff8 <xTaskIncrementTick+0x164>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d34e      	bcc.n	8003fa6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f08:	4b38      	ldr	r3, [pc, #224]	; (8003fec <xTaskIncrementTick+0x158>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <xTaskIncrementTick+0x82>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <xTaskIncrementTick+0x84>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1c:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <xTaskIncrementTick+0x164>)
 8003f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f22:	601a      	str	r2, [r3, #0]
					break;
 8003f24:	e03f      	b.n	8003fa6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f26:	4b31      	ldr	r3, [pc, #196]	; (8003fec <xTaskIncrementTick+0x158>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d203      	bcs.n	8003f46 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f3e:	4a2e      	ldr	r2, [pc, #184]	; (8003ff8 <xTaskIncrementTick+0x164>)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6013      	str	r3, [r2, #0]
						break;
 8003f44:	e02f      	b.n	8003fa6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe fd7e 	bl	8002a4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d004      	beq.n	8003f62 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	3318      	adds	r3, #24
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fe fd75 	bl	8002a4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f66:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <xTaskIncrementTick+0x168>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d903      	bls.n	8003f76 <xTaskIncrementTick+0xe2>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	4a22      	ldr	r2, [pc, #136]	; (8003ffc <xTaskIncrementTick+0x168>)
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <xTaskIncrementTick+0x16c>)
 8003f84:	441a      	add	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f7fe fd02 	bl	8002996 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <xTaskIncrementTick+0x170>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d3b3      	bcc.n	8003f08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fa4:	e7b0      	b.n	8003f08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fa6:	4b17      	ldr	r3, [pc, #92]	; (8004004 <xTaskIncrementTick+0x170>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	4914      	ldr	r1, [pc, #80]	; (8004000 <xTaskIncrementTick+0x16c>)
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d907      	bls.n	8003fce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	e004      	b.n	8003fce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fc4:	4b10      	ldr	r3, [pc, #64]	; (8004008 <xTaskIncrementTick+0x174>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <xTaskIncrementTick+0x174>)
 8003fcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <xTaskIncrementTick+0x178>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003fda:	697b      	ldr	r3, [r7, #20]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000bf4 	.word	0x20000bf4
 8003fe8:	20000bd0 	.word	0x20000bd0
 8003fec:	20000b84 	.word	0x20000b84
 8003ff0:	20000b88 	.word	0x20000b88
 8003ff4:	20000be4 	.word	0x20000be4
 8003ff8:	20000bec 	.word	0x20000bec
 8003ffc:	20000bd4 	.word	0x20000bd4
 8004000:	200006fc 	.word	0x200006fc
 8004004:	200006f8 	.word	0x200006f8
 8004008:	20000bdc 	.word	0x20000bdc
 800400c:	20000be0 	.word	0x20000be0

08004010 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004016:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <vTaskSwitchContext+0xa4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800401e:	4b26      	ldr	r3, [pc, #152]	; (80040b8 <vTaskSwitchContext+0xa8>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004024:	e041      	b.n	80040aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004026:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <vTaskSwitchContext+0xa8>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800402c:	4b23      	ldr	r3, [pc, #140]	; (80040bc <vTaskSwitchContext+0xac>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	e010      	b.n	8004056 <vTaskSwitchContext+0x46>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <vTaskSwitchContext+0x40>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	607b      	str	r3, [r7, #4]
}
 800404c:	bf00      	nop
 800404e:	e7fe      	b.n	800404e <vTaskSwitchContext+0x3e>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b01      	subs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	491a      	ldr	r1, [pc, #104]	; (80040c0 <vTaskSwitchContext+0xb0>)
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0e4      	beq.n	8004034 <vTaskSwitchContext+0x24>
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4a12      	ldr	r2, [pc, #72]	; (80040c0 <vTaskSwitchContext+0xb0>)
 8004076:	4413      	add	r3, r2
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	605a      	str	r2, [r3, #4]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	3308      	adds	r3, #8
 800408c:	429a      	cmp	r2, r3
 800408e:	d104      	bne.n	800409a <vTaskSwitchContext+0x8a>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4a08      	ldr	r2, [pc, #32]	; (80040c4 <vTaskSwitchContext+0xb4>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4a05      	ldr	r2, [pc, #20]	; (80040bc <vTaskSwitchContext+0xac>)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6013      	str	r3, [r2, #0]
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr
 80040b4:	20000bf4 	.word	0x20000bf4
 80040b8:	20000be0 	.word	0x20000be0
 80040bc:	20000bd4 	.word	0x20000bd4
 80040c0:	200006fc 	.word	0x200006fc
 80040c4:	200006f8 	.word	0x200006f8

080040c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	60fb      	str	r3, [r7, #12]
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040ee:	4b07      	ldr	r3, [pc, #28]	; (800410c <vTaskPlaceOnEventList+0x44>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3318      	adds	r3, #24
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fe fc70 	bl	80029dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040fc:	2101      	movs	r1, #1
 80040fe:	6838      	ldr	r0, [r7, #0]
 8004100:	f000 fd3e 	bl	8004b80 <prvAddCurrentTaskToDelayedList>
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	200006f8 	.word	0x200006f8

08004110 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	617b      	str	r3, [r7, #20]
}
 8004134:	bf00      	nop
 8004136:	e7fe      	b.n	8004136 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <vTaskPlaceOnEventListRestricted+0x54>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3318      	adds	r3, #24
 800413e:	4619      	mov	r1, r3
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f7fe fc28 	bl	8002996 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800414c:	f04f 33ff 	mov.w	r3, #4294967295
 8004150:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	68b8      	ldr	r0, [r7, #8]
 8004156:	f000 fd13 	bl	8004b80 <prvAddCurrentTaskToDelayedList>
	}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	200006f8 	.word	0x200006f8

08004168 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	60fb      	str	r3, [r7, #12]
}
 8004190:	bf00      	nop
 8004192:	e7fe      	b.n	8004192 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	3318      	adds	r3, #24
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe fc57 	bl	8002a4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <xTaskRemoveFromEventList+0xb0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d11d      	bne.n	80041e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	3304      	adds	r3, #4
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fc4e 	bl	8002a4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	4b19      	ldr	r3, [pc, #100]	; (800421c <xTaskRemoveFromEventList+0xb4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d903      	bls.n	80041c4 <xTaskRemoveFromEventList+0x5c>
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	4a16      	ldr	r2, [pc, #88]	; (800421c <xTaskRemoveFromEventList+0xb4>)
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4a13      	ldr	r2, [pc, #76]	; (8004220 <xTaskRemoveFromEventList+0xb8>)
 80041d2:	441a      	add	r2, r3
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f7fe fbdb 	bl	8002996 <vListInsertEnd>
 80041e0:	e005      	b.n	80041ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3318      	adds	r3, #24
 80041e6:	4619      	mov	r1, r3
 80041e8:	480e      	ldr	r0, [pc, #56]	; (8004224 <xTaskRemoveFromEventList+0xbc>)
 80041ea:	f7fe fbd4 	bl	8002996 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <xTaskRemoveFromEventList+0xc0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d905      	bls.n	8004208 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041fc:	2301      	movs	r3, #1
 80041fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <xTaskRemoveFromEventList+0xc4>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	e001      	b.n	800420c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800420c:	697b      	ldr	r3, [r7, #20]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000bf4 	.word	0x20000bf4
 800421c:	20000bd4 	.word	0x20000bd4
 8004220:	200006fc 	.word	0x200006fc
 8004224:	20000b8c 	.word	0x20000b8c
 8004228:	200006f8 	.word	0x200006f8
 800422c:	20000be0 	.word	0x20000be0

08004230 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <vTaskInternalSetTimeOutState+0x24>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <vTaskInternalSetTimeOutState+0x28>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	605a      	str	r2, [r3, #4]
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000be4 	.word	0x20000be4
 8004258:	20000bd0 	.word	0x20000bd0

0800425c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	613b      	str	r3, [r7, #16]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	60fb      	str	r3, [r7, #12]
}
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800429e:	f001 f91d 	bl	80054dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <xTaskCheckForTimeOut+0xbc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d102      	bne.n	80042c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
 80042c0:	e023      	b.n	800430a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b15      	ldr	r3, [pc, #84]	; (800431c <xTaskCheckForTimeOut+0xc0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d007      	beq.n	80042de <xTaskCheckForTimeOut+0x82>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d302      	bcc.n	80042de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042d8:	2301      	movs	r3, #1
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	e015      	b.n	800430a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d20b      	bcs.n	8004300 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	1ad2      	subs	r2, r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff9b 	bl	8004230 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	e004      	b.n	800430a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004306:	2301      	movs	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800430a:	f001 f917 	bl	800553c <vPortExitCritical>

	return xReturn;
 800430e:	69fb      	ldr	r3, [r7, #28]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20000bd0 	.word	0x20000bd0
 800431c:	20000be4 	.word	0x20000be4

08004320 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <vTaskMissedYield+0x14>)
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]
}
 800432a:	bf00      	nop
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000be0 	.word	0x20000be0

08004338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004340:	f000 f852 	bl	80043e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <prvIdleTask+0x28>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d9f9      	bls.n	8004340 <prvIdleTask+0x8>
			{
				taskYIELD();
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <prvIdleTask+0x2c>)
 800434e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800435c:	e7f0      	b.n	8004340 <prvIdleTask+0x8>
 800435e:	bf00      	nop
 8004360:	200006fc 	.word	0x200006fc
 8004364:	e000ed04 	.word	0xe000ed04

08004368 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800436e:	2300      	movs	r3, #0
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	e00c      	b.n	800438e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4a12      	ldr	r2, [pc, #72]	; (80043c8 <prvInitialiseTaskLists+0x60>)
 8004380:	4413      	add	r3, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fadc 	bl	8002940 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3301      	adds	r3, #1
 800438c:	607b      	str	r3, [r7, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b37      	cmp	r3, #55	; 0x37
 8004392:	d9ef      	bls.n	8004374 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004394:	480d      	ldr	r0, [pc, #52]	; (80043cc <prvInitialiseTaskLists+0x64>)
 8004396:	f7fe fad3 	bl	8002940 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800439a:	480d      	ldr	r0, [pc, #52]	; (80043d0 <prvInitialiseTaskLists+0x68>)
 800439c:	f7fe fad0 	bl	8002940 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043a0:	480c      	ldr	r0, [pc, #48]	; (80043d4 <prvInitialiseTaskLists+0x6c>)
 80043a2:	f7fe facd 	bl	8002940 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043a6:	480c      	ldr	r0, [pc, #48]	; (80043d8 <prvInitialiseTaskLists+0x70>)
 80043a8:	f7fe faca 	bl	8002940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043ac:	480b      	ldr	r0, [pc, #44]	; (80043dc <prvInitialiseTaskLists+0x74>)
 80043ae:	f7fe fac7 	bl	8002940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <prvInitialiseTaskLists+0x78>)
 80043b4:	4a05      	ldr	r2, [pc, #20]	; (80043cc <prvInitialiseTaskLists+0x64>)
 80043b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <prvInitialiseTaskLists+0x7c>)
 80043ba:	4a05      	ldr	r2, [pc, #20]	; (80043d0 <prvInitialiseTaskLists+0x68>)
 80043bc:	601a      	str	r2, [r3, #0]
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	200006fc 	.word	0x200006fc
 80043cc:	20000b5c 	.word	0x20000b5c
 80043d0:	20000b70 	.word	0x20000b70
 80043d4:	20000b8c 	.word	0x20000b8c
 80043d8:	20000ba0 	.word	0x20000ba0
 80043dc:	20000bb8 	.word	0x20000bb8
 80043e0:	20000b84 	.word	0x20000b84
 80043e4:	20000b88 	.word	0x20000b88

080043e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043ee:	e019      	b.n	8004424 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043f0:	f001 f874 	bl	80054dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80043f4:	4b10      	ldr	r3, [pc, #64]	; (8004438 <prvCheckTasksWaitingTermination+0x50>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe fb23 	bl	8002a4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <prvCheckTasksWaitingTermination+0x54>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3b01      	subs	r3, #1
 800440c:	4a0b      	ldr	r2, [pc, #44]	; (800443c <prvCheckTasksWaitingTermination+0x54>)
 800440e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <prvCheckTasksWaitingTermination+0x58>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3b01      	subs	r3, #1
 8004416:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <prvCheckTasksWaitingTermination+0x58>)
 8004418:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800441a:	f001 f88f 	bl	800553c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f810 	bl	8004444 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <prvCheckTasksWaitingTermination+0x58>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e1      	bne.n	80043f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20000ba0 	.word	0x20000ba0
 800443c:	20000bcc 	.word	0x20000bcc
 8004440:	20000bb4 	.word	0x20000bb4

08004444 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004452:	2b00      	cmp	r3, #0
 8004454:	d108      	bne.n	8004468 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	4618      	mov	r0, r3
 800445c:	f001 fa02 	bl	8005864 <vPortFree>
				vPortFree( pxTCB );
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f001 f9ff 	bl	8005864 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004466:	e018      	b.n	800449a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800446e:	2b01      	cmp	r3, #1
 8004470:	d103      	bne.n	800447a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f001 f9f6 	bl	8005864 <vPortFree>
	}
 8004478:	e00f      	b.n	800449a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004480:	2b02      	cmp	r3, #2
 8004482:	d00a      	beq.n	800449a <prvDeleteTCB+0x56>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	60fb      	str	r3, [r7, #12]
}
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <prvDeleteTCB+0x54>
	}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <prvResetNextTaskUnblockTime+0x40>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <prvResetNextTaskUnblockTime+0x14>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <prvResetNextTaskUnblockTime+0x16>
 80044b8:	2300      	movs	r3, #0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <prvResetNextTaskUnblockTime+0x44>)
 80044c0:	f04f 32ff 	mov.w	r2, #4294967295
 80044c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044c6:	e008      	b.n	80044da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <prvResetNextTaskUnblockTime+0x40>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <prvResetNextTaskUnblockTime+0x44>)
 80044d8:	6013      	str	r3, [r2, #0]
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	20000b84 	.word	0x20000b84
 80044e8:	20000bec 	.word	0x20000bec

080044ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <xTaskGetSchedulerState+0x34>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044fa:	2301      	movs	r3, #1
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	e008      	b.n	8004512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <xTaskGetSchedulerState+0x38>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004508:	2302      	movs	r3, #2
 800450a:	607b      	str	r3, [r7, #4]
 800450c:	e001      	b.n	8004512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004512:	687b      	ldr	r3, [r7, #4]
	}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20000bd8 	.word	0x20000bd8
 8004524:	20000bf4 	.word	0x20000bf4

08004528 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d056      	beq.n	80045ec <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4b2d      	ldr	r3, [pc, #180]	; (80045f8 <xTaskPriorityInherit+0xd0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	429a      	cmp	r2, r3
 800454a:	d246      	bcs.n	80045da <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db06      	blt.n	8004562 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004554:	4b28      	ldr	r3, [pc, #160]	; (80045f8 <xTaskPriorityInherit+0xd0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	6959      	ldr	r1, [r3, #20]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4a22      	ldr	r2, [pc, #136]	; (80045fc <xTaskPriorityInherit+0xd4>)
 8004574:	4413      	add	r3, r2
 8004576:	4299      	cmp	r1, r3
 8004578:	d101      	bne.n	800457e <xTaskPriorityInherit+0x56>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <xTaskPriorityInherit+0x58>
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d022      	beq.n	80045ca <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	3304      	adds	r3, #4
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe fa5f 	bl	8002a4c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800458e:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <xTaskPriorityInherit+0xd0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459c:	4b18      	ldr	r3, [pc, #96]	; (8004600 <xTaskPriorityInherit+0xd8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d903      	bls.n	80045ac <xTaskPriorityInherit+0x84>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	4a15      	ldr	r2, [pc, #84]	; (8004600 <xTaskPriorityInherit+0xd8>)
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4a10      	ldr	r2, [pc, #64]	; (80045fc <xTaskPriorityInherit+0xd4>)
 80045ba:	441a      	add	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	3304      	adds	r3, #4
 80045c0:	4619      	mov	r1, r3
 80045c2:	4610      	mov	r0, r2
 80045c4:	f7fe f9e7 	bl	8002996 <vListInsertEnd>
 80045c8:	e004      	b.n	80045d4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <xTaskPriorityInherit+0xd0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80045d4:	2301      	movs	r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	e008      	b.n	80045ec <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <xTaskPriorityInherit+0xd0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d201      	bcs.n	80045ec <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045ec:	68fb      	ldr	r3, [r7, #12]
	}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	200006f8 	.word	0x200006f8
 80045fc:	200006fc 	.word	0x200006fc
 8004600:	20000bd4 	.word	0x20000bd4

08004604 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d056      	beq.n	80046c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800461a:	4b2e      	ldr	r3, [pc, #184]	; (80046d4 <xTaskPriorityDisinherit+0xd0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	429a      	cmp	r2, r3
 8004622:	d00a      	beq.n	800463a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	60fb      	str	r3, [r7, #12]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	60bb      	str	r3, [r7, #8]
}
 8004654:	bf00      	nop
 8004656:	e7fe      	b.n	8004656 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465c:	1e5a      	subs	r2, r3, #1
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466a:	429a      	cmp	r2, r3
 800466c:	d02c      	beq.n	80046c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004672:	2b00      	cmp	r3, #0
 8004674:	d128      	bne.n	80046c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	3304      	adds	r3, #4
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe f9e6 	bl	8002a4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <xTaskPriorityDisinherit+0xd4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d903      	bls.n	80046a8 <xTaskPriorityDisinherit+0xa4>
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	4a0c      	ldr	r2, [pc, #48]	; (80046d8 <xTaskPriorityDisinherit+0xd4>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4a09      	ldr	r2, [pc, #36]	; (80046dc <xTaskPriorityDisinherit+0xd8>)
 80046b6:	441a      	add	r2, r3
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f7fe f969 	bl	8002996 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046c8:	697b      	ldr	r3, [r7, #20]
	}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	200006f8 	.word	0x200006f8
 80046d8:	20000bd4 	.word	0x20000bd4
 80046dc:	200006fc 	.word	0x200006fc

080046e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d06f      	beq.n	80047d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	60fb      	str	r3, [r7, #12]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d902      	bls.n	8004726 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	e002      	b.n	800472c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	429a      	cmp	r2, r3
 8004734:	d050      	beq.n	80047d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	429a      	cmp	r2, r3
 800473e:	d14b      	bne.n	80047d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004740:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	429a      	cmp	r2, r3
 8004748:	d10a      	bne.n	8004760 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60bb      	str	r3, [r7, #8]
}
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	db04      	blt.n	800477e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	6959      	ldr	r1, [r3, #20]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800478e:	4413      	add	r3, r2
 8004790:	4299      	cmp	r1, r3
 8004792:	d101      	bne.n	8004798 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004798:	2300      	movs	r3, #0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01c      	beq.n	80047d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe f952 	bl	8002a4c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d903      	bls.n	80047bc <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	4a0b      	ldr	r2, [pc, #44]	; (80047e8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4a06      	ldr	r2, [pc, #24]	; (80047e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80047ca:	441a      	add	r2, r3
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f7fe f8df 	bl	8002996 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047d8:	bf00      	nop
 80047da:	3720      	adds	r7, #32
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	200006f8 	.word	0x200006f8
 80047e4:	200006fc 	.word	0x200006fc
 80047e8:	20000bd4 	.word	0x20000bd4

080047ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <pvTaskIncrementMutexHeldCount+0x24>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d004      	beq.n	8004802 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <pvTaskIncrementMutexHeldCount+0x24>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047fe:	3201      	adds	r2, #1
 8004800:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004802:	4b03      	ldr	r3, [pc, #12]	; (8004810 <pvTaskIncrementMutexHeldCount+0x24>)
 8004804:	681b      	ldr	r3, [r3, #0]
	}
 8004806:	4618      	mov	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	200006f8 	.word	0x200006f8

08004814 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800481e:	f000 fe5d 	bl	80054dc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004822:	4b1e      	ldr	r3, [pc, #120]	; (800489c <ulTaskNotifyTake+0x88>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	2b00      	cmp	r3, #0
 800482a:	d113      	bne.n	8004854 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800482c:	4b1b      	ldr	r3, [pc, #108]	; (800489c <ulTaskNotifyTake+0x88>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00b      	beq.n	8004854 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800483c:	2101      	movs	r1, #1
 800483e:	6838      	ldr	r0, [r7, #0]
 8004840:	f000 f99e 	bl	8004b80 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004844:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <ulTaskNotifyTake+0x8c>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004854:	f000 fe72 	bl	800553c <vPortExitCritical>

		taskENTER_CRITICAL();
 8004858:	f000 fe40 	bl	80054dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <ulTaskNotifyTake+0x88>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00c      	beq.n	8004884 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d004      	beq.n	800487a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004870:	4b0a      	ldr	r3, [pc, #40]	; (800489c <ulTaskNotifyTake+0x88>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2200      	movs	r2, #0
 8004876:	655a      	str	r2, [r3, #84]	; 0x54
 8004878:	e004      	b.n	8004884 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800487a:	4b08      	ldr	r3, [pc, #32]	; (800489c <ulTaskNotifyTake+0x88>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	3a01      	subs	r2, #1
 8004882:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <ulTaskNotifyTake+0x88>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800488e:	f000 fe55 	bl	800553c <vPortExitCritical>

		return ulReturn;
 8004892:	68fb      	ldr	r3, [r7, #12]
	}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	200006f8 	.word	0x200006f8
 80048a0:	e000ed04 	.word	0xe000ed04

080048a4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08a      	sub	sp, #40	; 0x28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80048b4:	2301      	movs	r3, #1
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <xTaskGenericNotify+0x30>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	61bb      	str	r3, [r7, #24]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80048d8:	f000 fe00 	bl	80054dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80048f0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	2202      	movs	r2, #2
 80048f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d828      	bhi.n	8004952 <xTaskGenericNotify+0xae>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <xTaskGenericNotify+0x64>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	08004953 	.word	0x08004953
 800490c:	0800491d 	.word	0x0800491d
 8004910:	0800492b 	.word	0x0800492b
 8004914:	08004937 	.word	0x08004937
 8004918:	0800493f 	.word	0x0800493f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	431a      	orrs	r2, r3
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004928:	e013      	b.n	8004952 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004934:	e00d      	b.n	8004952 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800493c:	e009      	b.n	8004952 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800493e:	7ffb      	ldrb	r3, [r7, #31]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d003      	beq.n	800494c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800494a:	e001      	b.n	8004950 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 800494c:	2300      	movs	r3, #0
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004950:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004952:	7ffb      	ldrb	r3, [r7, #31]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d13a      	bne.n	80049ce <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	3304      	adds	r3, #4
 800495c:	4618      	mov	r0, r3
 800495e:	f7fe f875 	bl	8002a4c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004966:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <xTaskGenericNotify+0x138>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d903      	bls.n	8004976 <xTaskGenericNotify+0xd2>
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <xTaskGenericNotify+0x138>)
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4a17      	ldr	r2, [pc, #92]	; (80049e0 <xTaskGenericNotify+0x13c>)
 8004984:	441a      	add	r2, r3
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fe f802 	bl	8002996 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <xTaskGenericNotify+0x10c>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	617b      	str	r3, [r7, #20]
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <xTaskGenericNotify+0x140>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d907      	bls.n	80049ce <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <xTaskGenericNotify+0x144>)
 80049c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80049ce:	f000 fdb5 	bl	800553c <vPortExitCritical>

		return xReturn;
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3728      	adds	r7, #40	; 0x28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000bd4 	.word	0x20000bd4
 80049e0:	200006fc 	.word	0x200006fc
 80049e4:	200006f8 	.word	0x200006f8
 80049e8:	e000ed04 	.word	0xe000ed04

080049ec <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08e      	sub	sp, #56	; 0x38
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80049fc:	2301      	movs	r3, #1
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a18:	bf00      	nop
 8004a1a:	e7fe      	b.n	8004a1a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a1c:	f000 fe20 	bl	8005660 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004a24:	f3ef 8211 	mrs	r2, BASEPRI
 8004a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	623a      	str	r2, [r7, #32]
 8004a3a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004a3c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d828      	bhi.n	8004ab8 <xTaskGenericNotifyFromISR+0xcc>
 8004a66:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <xTaskGenericNotifyFromISR+0x80>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004ab9 	.word	0x08004ab9
 8004a70:	08004a81 	.word	0x08004a81
 8004a74:	08004a8f 	.word	0x08004a8f
 8004a78:	08004a9b 	.word	0x08004a9b
 8004a7c:	08004aa3 	.word	0x08004aa3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004a8c:	e014      	b.n	8004ab8 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004a98:	e00e      	b.n	8004ab8 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004aa0:	e00a      	b.n	8004ab8 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d003      	beq.n	8004ab2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004ab0:	e001      	b.n	8004ab6 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004ab6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d147      	bne.n	8004b50 <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	61bb      	str	r3, [r7, #24]
}
 8004ada:	bf00      	nop
 8004adc:	e7fe      	b.n	8004adc <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ade:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <xTaskGenericNotifyFromISR+0x17c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11d      	bne.n	8004b22 <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	3304      	adds	r3, #4
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fd ffae 	bl	8002a4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <xTaskGenericNotifyFromISR+0x180>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d903      	bls.n	8004b04 <xTaskGenericNotifyFromISR+0x118>
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <xTaskGenericNotifyFromISR+0x180>)
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4a17      	ldr	r2, [pc, #92]	; (8004b70 <xTaskGenericNotifyFromISR+0x184>)
 8004b12:	441a      	add	r2, r3
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	3304      	adds	r3, #4
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	f7fd ff3b 	bl	8002996 <vListInsertEnd>
 8004b20:	e005      	b.n	8004b2e <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	3318      	adds	r3, #24
 8004b26:	4619      	mov	r1, r3
 8004b28:	4812      	ldr	r0, [pc, #72]	; (8004b74 <xTaskGenericNotifyFromISR+0x188>)
 8004b2a:	f7fd ff34 	bl	8002996 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <xTaskGenericNotifyFromISR+0x18c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d909      	bls.n	8004b50 <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e002      	b.n	8004b50 <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <xTaskGenericNotifyFromISR+0x190>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f383 8811 	msr	BASEPRI, r3
}
 8004b5a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3738      	adds	r7, #56	; 0x38
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000bf4 	.word	0x20000bf4
 8004b6c:	20000bd4 	.word	0x20000bd4
 8004b70:	200006fc 	.word	0x200006fc
 8004b74:	20000b8c 	.word	0x20000b8c
 8004b78:	200006f8 	.word	0x200006f8
 8004b7c:	20000be0 	.word	0x20000be0

08004b80 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b8a:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b90:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3304      	adds	r3, #4
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fd ff58 	bl	8002a4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba2:	d10a      	bne.n	8004bba <prvAddCurrentTaskToDelayedList+0x3a>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004baa:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4819      	ldr	r0, [pc, #100]	; (8004c18 <prvAddCurrentTaskToDelayedList+0x98>)
 8004bb4:	f7fd feef 	bl	8002996 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bb8:	e026      	b.n	8004c08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bc2:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d209      	bcs.n	8004be6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4610      	mov	r0, r2
 8004be0:	f7fd fefc 	bl	80029dc <vListInsert>
}
 8004be4:	e010      	b.n	8004c08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004be6:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f7fd fef2 	bl	80029dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d202      	bcs.n	8004c08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c02:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	6013      	str	r3, [r2, #0]
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000bd0 	.word	0x20000bd0
 8004c14:	200006f8 	.word	0x200006f8
 8004c18:	20000bb8 	.word	0x20000bb8
 8004c1c:	20000b88 	.word	0x20000b88
 8004c20:	20000b84 	.word	0x20000b84
 8004c24:	20000bec 	.word	0x20000bec

08004c28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c32:	f000 fb1f 	bl	8005274 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c36:	4b1c      	ldr	r3, [pc, #112]	; (8004ca8 <xTimerCreateTimerTask+0x80>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d021      	beq.n	8004c82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c46:	1d3a      	adds	r2, r7, #4
 8004c48:	f107 0108 	add.w	r1, r7, #8
 8004c4c:	f107 030c 	add.w	r3, r7, #12
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fd fe5b 	bl	800290c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	9202      	str	r2, [sp, #8]
 8004c5e:	9301      	str	r3, [sp, #4]
 8004c60:	2302      	movs	r3, #2
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	2300      	movs	r3, #0
 8004c66:	460a      	mov	r2, r1
 8004c68:	4910      	ldr	r1, [pc, #64]	; (8004cac <xTimerCreateTimerTask+0x84>)
 8004c6a:	4811      	ldr	r0, [pc, #68]	; (8004cb0 <xTimerCreateTimerTask+0x88>)
 8004c6c:	f7fe fe14 	bl	8003898 <xTaskCreateStatic>
 8004c70:	4603      	mov	r3, r0
 8004c72:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <xTimerCreateTimerTask+0x8c>)
 8004c74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c76:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <xTimerCreateTimerTask+0x8c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	613b      	str	r3, [r7, #16]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c9e:	697b      	ldr	r3, [r7, #20]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000c28 	.word	0x20000c28
 8004cac:	080073ac 	.word	0x080073ac
 8004cb0:	08004e7d 	.word	0x08004e7d
 8004cb4:	20000c2c 	.word	0x20000c2c

08004cb8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8004cc6:	2030      	movs	r0, #48	; 0x30
 8004cc8:	f000 fd08 	bl	80056dc <pvPortMalloc>
 8004ccc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00d      	beq.n	8004cf0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f809 	bl	8004cfa <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004cf0:	697b      	ldr	r3, [r7, #20]
	}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b086      	sub	sp, #24
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	617b      	str	r3, [r7, #20]
}
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d015      	beq.n	8004d56 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004d2a:	f000 faa3 	bl	8005274 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	6a3a      	ldr	r2, [r7, #32]
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fd fe14 	bl	800297e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004d56:	bf00      	nop
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	623b      	str	r3, [r7, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d8e:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <xTimerGenericCommand+0x98>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02a      	beq.n	8004dec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b05      	cmp	r3, #5
 8004da6:	dc18      	bgt.n	8004dda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004da8:	f7ff fba0 	bl	80044ec <xTaskGetSchedulerState>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d109      	bne.n	8004dc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004db2:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <xTimerGenericCommand+0x98>)
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	f107 0110 	add.w	r1, r7, #16
 8004dba:	2300      	movs	r3, #0
 8004dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dbe:	f7fe f819 	bl	8002df4 <xQueueGenericSend>
 8004dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8004dc4:	e012      	b.n	8004dec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <xTimerGenericCommand+0x98>)
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	f107 0110 	add.w	r1, r7, #16
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f7fe f80f 	bl	8002df4 <xQueueGenericSend>
 8004dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8004dd8:	e008      	b.n	8004dec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <xTimerGenericCommand+0x98>)
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	f107 0110 	add.w	r1, r7, #16
 8004de2:	2300      	movs	r3, #0
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	f7fe f903 	bl	8002ff0 <xQueueGenericSendFromISR>
 8004dea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3728      	adds	r7, #40	; 0x28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000c28 	.word	0x20000c28

08004dfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e06:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <prvProcessExpiredTimer+0x7c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fd fe19 	bl	8002a4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d122      	bne.n	8004e68 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	18d1      	adds	r1, r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	6978      	ldr	r0, [r7, #20]
 8004e30:	f000 f8c8 	bl	8004fc4 <prvInsertTimerInActiveList>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	2100      	movs	r1, #0
 8004e44:	6978      	ldr	r0, [r7, #20]
 8004e46:	f7ff ff8b 	bl	8004d60 <xTimerGenericCommand>
 8004e4a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	60fb      	str	r3, [r7, #12]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	6978      	ldr	r0, [r7, #20]
 8004e6e:	4798      	blx	r3
}
 8004e70:	bf00      	nop
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20000c20 	.word	0x20000c20

08004e7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e84:	f107 0308 	add.w	r3, r7, #8
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 f857 	bl	8004f3c <prvGetNextExpireTime>
 8004e8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4619      	mov	r1, r3
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f803 	bl	8004ea0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e9a:	f000 f8d5 	bl	8005048 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e9e:	e7f1      	b.n	8004e84 <prvTimerTask+0x8>

08004ea0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004eaa:	f7fe ff27 	bl	8003cfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 f866 	bl	8004f84 <prvSampleTimeNow>
 8004eb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d130      	bne.n	8004f22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <prvProcessTimerOrBlockTask+0x3c>
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d806      	bhi.n	8004edc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ece:	f7fe ff23 	bl	8003d18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ed2:	68f9      	ldr	r1, [r7, #12]
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ff91 	bl	8004dfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004eda:	e024      	b.n	8004f26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d008      	beq.n	8004ef4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ee2:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <prvProcessTimerOrBlockTask+0x90>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <prvProcessTimerOrBlockTask+0x94>)
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	4619      	mov	r1, r3
 8004f02:	f7fe fc95 	bl	8003830 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f06:	f7fe ff07 	bl	8003d18 <xTaskResumeAll>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <prvProcessTimerOrBlockTask+0x98>)
 8004f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	f3bf 8f6f 	isb	sy
}
 8004f20:	e001      	b.n	8004f26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f22:	f7fe fef9 	bl	8003d18 <xTaskResumeAll>
}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000c24 	.word	0x20000c24
 8004f34:	20000c28 	.word	0x20000c28
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f44:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <prvGetNextExpireTime+0x44>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bf0c      	ite	eq
 8004f4e:	2301      	moveq	r3, #1
 8004f50:	2300      	movne	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d105      	bne.n	8004f6e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f62:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <prvGetNextExpireTime+0x44>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e001      	b.n	8004f72 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f72:	68fb      	ldr	r3, [r7, #12]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000c20 	.word	0x20000c20

08004f84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f8c:	f7fe ff62 	bl	8003e54 <xTaskGetTickCount>
 8004f90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <prvSampleTimeNow+0x3c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d205      	bcs.n	8004fa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f9c:	f000 f908 	bl	80051b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e002      	b.n	8004fae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004fae:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <prvSampleTimeNow+0x3c>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000c30 	.word	0x20000c30

08004fc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d812      	bhi.n	8005010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e01b      	b.n	8005036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ffe:	4b10      	ldr	r3, [pc, #64]	; (8005040 <prvInsertTimerInActiveList+0x7c>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3304      	adds	r3, #4
 8005006:	4619      	mov	r1, r3
 8005008:	4610      	mov	r0, r2
 800500a:	f7fd fce7 	bl	80029dc <vListInsert>
 800500e:	e012      	b.n	8005036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d206      	bcs.n	8005026 <prvInsertTimerInActiveList+0x62>
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d302      	bcc.n	8005026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005020:	2301      	movs	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e007      	b.n	8005036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005026:	4b07      	ldr	r3, [pc, #28]	; (8005044 <prvInsertTimerInActiveList+0x80>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3304      	adds	r3, #4
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f7fd fcd3 	bl	80029dc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005036:	697b      	ldr	r3, [r7, #20]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20000c24 	.word	0x20000c24
 8005044:	20000c20 	.word	0x20000c20

08005048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08e      	sub	sp, #56	; 0x38
 800504c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800504e:	e09d      	b.n	800518c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	da18      	bge.n	8005088 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005056:	1d3b      	adds	r3, r7, #4
 8005058:	3304      	adds	r3, #4
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	61fb      	str	r3, [r7, #28]
}
 8005074:	bf00      	nop
 8005076:	e7fe      	b.n	8005076 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800507e:	6850      	ldr	r0, [r2, #4]
 8005080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005082:	6892      	ldr	r2, [r2, #8]
 8005084:	4611      	mov	r1, r2
 8005086:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	db7d      	blt.n	800518a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d004      	beq.n	80050a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	3304      	adds	r3, #4
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fd fcd4 	bl	8002a4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050a4:	463b      	mov	r3, r7
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff ff6c 	bl	8004f84 <prvSampleTimeNow>
 80050ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b09      	cmp	r3, #9
 80050b2:	d86b      	bhi.n	800518c <prvProcessReceivedCommands+0x144>
 80050b4:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <prvProcessReceivedCommands+0x74>)
 80050b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ba:	bf00      	nop
 80050bc:	080050e5 	.word	0x080050e5
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050e5 	.word	0x080050e5
 80050c8:	0800518d 	.word	0x0800518d
 80050cc:	08005141 	.word	0x08005141
 80050d0:	08005179 	.word	0x08005179
 80050d4:	080050e5 	.word	0x080050e5
 80050d8:	080050e5 	.word	0x080050e5
 80050dc:	0800518d 	.word	0x0800518d
 80050e0:	08005141 	.word	0x08005141
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	18d1      	adds	r1, r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f2:	f7ff ff67 	bl	8004fc4 <prvInsertTimerInActiveList>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d047      	beq.n	800518c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005102:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d13f      	bne.n	800518c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	441a      	add	r2, r3
 8005114:	2300      	movs	r3, #0
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	2300      	movs	r3, #0
 800511a:	2100      	movs	r1, #0
 800511c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800511e:	f7ff fe1f 	bl	8004d60 <xTimerGenericCommand>
 8005122:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d130      	bne.n	800518c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	61bb      	str	r3, [r7, #24]
}
 800513c:	bf00      	nop
 800513e:	e7fe      	b.n	800513e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	617b      	str	r3, [r7, #20]
}
 8005160:	bf00      	nop
 8005162:	e7fe      	b.n	8005162 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	699a      	ldr	r2, [r3, #24]
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	18d1      	adds	r1, r2, r3
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005172:	f7ff ff27 	bl	8004fc4 <prvInsertTimerInActiveList>
					break;
 8005176:	e009      	b.n	800518c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d104      	bne.n	800518c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005184:	f000 fb6e 	bl	8005864 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005188:	e000      	b.n	800518c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800518a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800518c:	4b07      	ldr	r3, [pc, #28]	; (80051ac <prvProcessReceivedCommands+0x164>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	1d39      	adds	r1, r7, #4
 8005192:	2200      	movs	r2, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f7fd ffc3 	bl	8003120 <xQueueReceive>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	f47f af57 	bne.w	8005050 <prvProcessReceivedCommands+0x8>
	}
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	3730      	adds	r7, #48	; 0x30
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20000c28 	.word	0x20000c28

080051b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051b6:	e045      	b.n	8005244 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051b8:	4b2c      	ldr	r3, [pc, #176]	; (800526c <prvSwitchTimerLists+0xbc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051c2:	4b2a      	ldr	r3, [pc, #168]	; (800526c <prvSwitchTimerLists+0xbc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fd fc3b 	bl	8002a4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d12e      	bne.n	8005244 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4413      	add	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d90e      	bls.n	8005216 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005204:	4b19      	ldr	r3, [pc, #100]	; (800526c <prvSwitchTimerLists+0xbc>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3304      	adds	r3, #4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f7fd fbe4 	bl	80029dc <vListInsert>
 8005214:	e016      	b.n	8005244 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005216:	2300      	movs	r3, #0
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	2300      	movs	r3, #0
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	2100      	movs	r1, #0
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f7ff fd9d 	bl	8004d60 <xTimerGenericCommand>
 8005226:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <prvSwitchTimerLists+0x94>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	603b      	str	r3, [r7, #0]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005244:	4b09      	ldr	r3, [pc, #36]	; (800526c <prvSwitchTimerLists+0xbc>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1b4      	bne.n	80051b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <prvSwitchTimerLists+0xbc>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005254:	4b06      	ldr	r3, [pc, #24]	; (8005270 <prvSwitchTimerLists+0xc0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a04      	ldr	r2, [pc, #16]	; (800526c <prvSwitchTimerLists+0xbc>)
 800525a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800525c:	4a04      	ldr	r2, [pc, #16]	; (8005270 <prvSwitchTimerLists+0xc0>)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	6013      	str	r3, [r2, #0]
}
 8005262:	bf00      	nop
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000c20 	.word	0x20000c20
 8005270:	20000c24 	.word	0x20000c24

08005274 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800527a:	f000 f92f 	bl	80054dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800527e:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <prvCheckForValidListAndQueue+0x60>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d120      	bne.n	80052c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005286:	4814      	ldr	r0, [pc, #80]	; (80052d8 <prvCheckForValidListAndQueue+0x64>)
 8005288:	f7fd fb5a 	bl	8002940 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800528c:	4813      	ldr	r0, [pc, #76]	; (80052dc <prvCheckForValidListAndQueue+0x68>)
 800528e:	f7fd fb57 	bl	8002940 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005292:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <prvCheckForValidListAndQueue+0x6c>)
 8005294:	4a10      	ldr	r2, [pc, #64]	; (80052d8 <prvCheckForValidListAndQueue+0x64>)
 8005296:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005298:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <prvCheckForValidListAndQueue+0x70>)
 800529a:	4a10      	ldr	r2, [pc, #64]	; (80052dc <prvCheckForValidListAndQueue+0x68>)
 800529c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800529e:	2300      	movs	r3, #0
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	4b11      	ldr	r3, [pc, #68]	; (80052e8 <prvCheckForValidListAndQueue+0x74>)
 80052a4:	4a11      	ldr	r2, [pc, #68]	; (80052ec <prvCheckForValidListAndQueue+0x78>)
 80052a6:	2110      	movs	r1, #16
 80052a8:	200a      	movs	r0, #10
 80052aa:	f7fd fc61 	bl	8002b70 <xQueueGenericCreateStatic>
 80052ae:	4603      	mov	r3, r0
 80052b0:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <prvCheckForValidListAndQueue+0x60>)
 80052b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052b4:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <prvCheckForValidListAndQueue+0x60>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <prvCheckForValidListAndQueue+0x60>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	490b      	ldr	r1, [pc, #44]	; (80052f0 <prvCheckForValidListAndQueue+0x7c>)
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe fa62 	bl	800378c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052c8:	f000 f938 	bl	800553c <vPortExitCritical>
}
 80052cc:	bf00      	nop
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20000c28 	.word	0x20000c28
 80052d8:	20000bf8 	.word	0x20000bf8
 80052dc:	20000c0c 	.word	0x20000c0c
 80052e0:	20000c20 	.word	0x20000c20
 80052e4:	20000c24 	.word	0x20000c24
 80052e8:	20000cd4 	.word	0x20000cd4
 80052ec:	20000c34 	.word	0x20000c34
 80052f0:	080073b4 	.word	0x080073b4

080052f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3b04      	subs	r3, #4
 8005304:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800530c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3b04      	subs	r3, #4
 8005312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3b04      	subs	r3, #4
 8005322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005324:	4a08      	ldr	r2, [pc, #32]	; (8005348 <pxPortInitialiseStack+0x54>)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3b14      	subs	r3, #20
 800532e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3b20      	subs	r3, #32
 800533a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800533c:	68fb      	ldr	r3, [r7, #12]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr
 8005348:	0800534d 	.word	0x0800534d

0800534c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005352:	2300      	movs	r3, #0
 8005354:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <prvTaskExitError+0x54>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535e:	d00a      	beq.n	8005376 <prvTaskExitError+0x2a>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	60fb      	str	r3, [r7, #12]
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <prvTaskExitError+0x28>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	60bb      	str	r3, [r7, #8]
}
 8005388:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800538a:	bf00      	nop
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0fc      	beq.n	800538c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005392:	bf00      	nop
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	2000001c 	.word	0x2000001c
	...

080053b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <pxCurrentTCBConst2>)
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	6808      	ldr	r0, [r1, #0]
 80053b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053ba:	f380 8809 	msr	PSP, r0
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f380 8811 	msr	BASEPRI, r0
 80053ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80053ce:	4770      	bx	lr

080053d0 <pxCurrentTCBConst2>:
 80053d0:	200006f8 	.word	0x200006f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop

080053d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80053d8:	4806      	ldr	r0, [pc, #24]	; (80053f4 <prvPortStartFirstTask+0x1c>)
 80053da:	6800      	ldr	r0, [r0, #0]
 80053dc:	6800      	ldr	r0, [r0, #0]
 80053de:	f380 8808 	msr	MSP, r0
 80053e2:	b662      	cpsie	i
 80053e4:	b661      	cpsie	f
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	df00      	svc	0
 80053f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053f2:	bf00      	nop
 80053f4:	e000ed08 	.word	0xe000ed08

080053f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053fe:	4b32      	ldr	r3, [pc, #200]	; (80054c8 <xPortStartScheduler+0xd0>)
 8005400:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005420:	b2da      	uxtb	r2, r3
 8005422:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <xPortStartScheduler+0xd4>)
 8005424:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005426:	4b2a      	ldr	r3, [pc, #168]	; (80054d0 <xPortStartScheduler+0xd8>)
 8005428:	2207      	movs	r2, #7
 800542a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800542c:	e009      	b.n	8005442 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800542e:	4b28      	ldr	r3, [pc, #160]	; (80054d0 <xPortStartScheduler+0xd8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3b01      	subs	r3, #1
 8005434:	4a26      	ldr	r2, [pc, #152]	; (80054d0 <xPortStartScheduler+0xd8>)
 8005436:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	b2db      	uxtb	r3, r3
 8005440:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	2b80      	cmp	r3, #128	; 0x80
 800544c:	d0ef      	beq.n	800542e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800544e:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <xPortStartScheduler+0xd8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1c3 0307 	rsb	r3, r3, #7
 8005456:	2b04      	cmp	r3, #4
 8005458:	d00a      	beq.n	8005470 <xPortStartScheduler+0x78>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	60bb      	str	r3, [r7, #8]
}
 800546c:	bf00      	nop
 800546e:	e7fe      	b.n	800546e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005470:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <xPortStartScheduler+0xd8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	4a16      	ldr	r2, [pc, #88]	; (80054d0 <xPortStartScheduler+0xd8>)
 8005478:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800547a:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <xPortStartScheduler+0xd8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005482:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <xPortStartScheduler+0xd8>)
 8005484:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800548e:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <xPortStartScheduler+0xdc>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a10      	ldr	r2, [pc, #64]	; (80054d4 <xPortStartScheduler+0xdc>)
 8005494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005498:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800549a:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <xPortStartScheduler+0xdc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a0d      	ldr	r2, [pc, #52]	; (80054d4 <xPortStartScheduler+0xdc>)
 80054a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054a6:	f000 f8b9 	bl	800561c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054aa:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <xPortStartScheduler+0xe0>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054b0:	f7ff ff92 	bl	80053d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054b4:	f7fe fdac 	bl	8004010 <vTaskSwitchContext>
	prvTaskExitError();
 80054b8:	f7ff ff48 	bl	800534c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	e000e400 	.word	0xe000e400
 80054cc:	20000d24 	.word	0x20000d24
 80054d0:	20000d28 	.word	0x20000d28
 80054d4:	e000ed20 	.word	0xe000ed20
 80054d8:	2000001c 	.word	0x2000001c

080054dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	607b      	str	r3, [r7, #4]
}
 80054f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054f6:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <vPortEnterCritical+0x58>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	4a0d      	ldr	r2, [pc, #52]	; (8005534 <vPortEnterCritical+0x58>)
 80054fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005500:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <vPortEnterCritical+0x58>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d10f      	bne.n	8005528 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <vPortEnterCritical+0x5c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <vPortEnterCritical+0x4c>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	603b      	str	r3, [r7, #0]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <vPortEnterCritical+0x4a>
	}
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	bc80      	pop	{r7}
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	2000001c 	.word	0x2000001c
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <vPortExitCritical+0x4c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <vPortExitCritical+0x24>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	607b      	str	r3, [r7, #4]
}
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005560:	4b09      	ldr	r3, [pc, #36]	; (8005588 <vPortExitCritical+0x4c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3b01      	subs	r3, #1
 8005566:	4a08      	ldr	r2, [pc, #32]	; (8005588 <vPortExitCritical+0x4c>)
 8005568:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800556a:	4b07      	ldr	r3, [pc, #28]	; (8005588 <vPortExitCritical+0x4c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d105      	bne.n	800557e <vPortExitCritical+0x42>
 8005572:	2300      	movs	r3, #0
 8005574:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f383 8811 	msr	BASEPRI, r3
}
 800557c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr
 8005588:	2000001c 	.word	0x2000001c
 800558c:	00000000 	.word	0x00000000

08005590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005590:	f3ef 8009 	mrs	r0, PSP
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <pxCurrentTCBConst>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055a0:	6010      	str	r0, [r2, #0]
 80055a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80055a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055aa:	f380 8811 	msr	BASEPRI, r0
 80055ae:	f7fe fd2f 	bl	8004010 <vTaskSwitchContext>
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f380 8811 	msr	BASEPRI, r0
 80055ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80055be:	6819      	ldr	r1, [r3, #0]
 80055c0:	6808      	ldr	r0, [r1, #0]
 80055c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055c6:	f380 8809 	msr	PSP, r0
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	4770      	bx	lr

080055d0 <pxCurrentTCBConst>:
 80055d0:	200006f8 	.word	0x200006f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop

080055d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	607b      	str	r3, [r7, #4]
}
 80055f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055f2:	f7fe fc4f 	bl	8003e94 <xTaskIncrementTick>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055fc:	4b06      	ldr	r3, [pc, #24]	; (8005618 <SysTick_Handler+0x40>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f383 8811 	msr	BASEPRI, r3
}
 800560e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <vPortSetupTimerInterrupt+0x30>)
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <vPortSetupTimerInterrupt+0x34>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800562c:	4b09      	ldr	r3, [pc, #36]	; (8005654 <vPortSetupTimerInterrupt+0x38>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a09      	ldr	r2, [pc, #36]	; (8005658 <vPortSetupTimerInterrupt+0x3c>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	099b      	lsrs	r3, r3, #6
 8005638:	4a08      	ldr	r2, [pc, #32]	; (800565c <vPortSetupTimerInterrupt+0x40>)
 800563a:	3b01      	subs	r3, #1
 800563c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800563e:	4b03      	ldr	r3, [pc, #12]	; (800564c <vPortSetupTimerInterrupt+0x30>)
 8005640:	2207      	movs	r2, #7
 8005642:	601a      	str	r2, [r3, #0]
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	e000e010 	.word	0xe000e010
 8005650:	e000e018 	.word	0xe000e018
 8005654:	20000010 	.word	0x20000010
 8005658:	10624dd3 	.word	0x10624dd3
 800565c:	e000e014 	.word	0xe000e014

08005660 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005666:	f3ef 8305 	mrs	r3, IPSR
 800566a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b0f      	cmp	r3, #15
 8005670:	d914      	bls.n	800569c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005672:	4a16      	ldr	r2, [pc, #88]	; (80056cc <vPortValidateInterruptPriority+0x6c>)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800567c:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <vPortValidateInterruptPriority+0x70>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	7afa      	ldrb	r2, [r7, #11]
 8005682:	429a      	cmp	r2, r3
 8005684:	d20a      	bcs.n	800569c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	607b      	str	r3, [r7, #4]
}
 8005698:	bf00      	nop
 800569a:	e7fe      	b.n	800569a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800569c:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <vPortValidateInterruptPriority+0x74>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056a4:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <vPortValidateInterruptPriority+0x78>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d90a      	bls.n	80056c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	603b      	str	r3, [r7, #0]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <vPortValidateInterruptPriority+0x60>
	}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr
 80056cc:	e000e3f0 	.word	0xe000e3f0
 80056d0:	20000d24 	.word	0x20000d24
 80056d4:	e000ed0c 	.word	0xe000ed0c
 80056d8:	20000d28 	.word	0x20000d28

080056dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08a      	sub	sp, #40	; 0x28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056e4:	2300      	movs	r3, #0
 80056e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056e8:	f7fe fb08 	bl	8003cfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056ec:	4b58      	ldr	r3, [pc, #352]	; (8005850 <pvPortMalloc+0x174>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056f4:	f000 f910 	bl	8005918 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056f8:	4b56      	ldr	r3, [pc, #344]	; (8005854 <pvPortMalloc+0x178>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4013      	ands	r3, r2
 8005700:	2b00      	cmp	r3, #0
 8005702:	f040 808e 	bne.w	8005822 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d01d      	beq.n	8005748 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800570c:	2208      	movs	r2, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4413      	add	r3, r2
 8005712:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	2b00      	cmp	r3, #0
 800571c:	d014      	beq.n	8005748 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f023 0307 	bic.w	r3, r3, #7
 8005724:	3308      	adds	r3, #8
 8005726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <pvPortMalloc+0x6c>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	617b      	str	r3, [r7, #20]
}
 8005744:	bf00      	nop
 8005746:	e7fe      	b.n	8005746 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d069      	beq.n	8005822 <pvPortMalloc+0x146>
 800574e:	4b42      	ldr	r3, [pc, #264]	; (8005858 <pvPortMalloc+0x17c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	d864      	bhi.n	8005822 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005758:	4b40      	ldr	r3, [pc, #256]	; (800585c <pvPortMalloc+0x180>)
 800575a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800575c:	4b3f      	ldr	r3, [pc, #252]	; (800585c <pvPortMalloc+0x180>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005762:	e004      	b.n	800576e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	d903      	bls.n	8005780 <pvPortMalloc+0xa4>
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f1      	bne.n	8005764 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005780:	4b33      	ldr	r3, [pc, #204]	; (8005850 <pvPortMalloc+0x174>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005786:	429a      	cmp	r2, r3
 8005788:	d04b      	beq.n	8005822 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2208      	movs	r2, #8
 8005790:	4413      	add	r3, r2
 8005792:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	1ad2      	subs	r2, r2, r3
 80057a4:	2308      	movs	r3, #8
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d91f      	bls.n	80057ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4413      	add	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <pvPortMalloc+0xf8>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	613b      	str	r3, [r7, #16]
}
 80057d0:	bf00      	nop
 80057d2:	e7fe      	b.n	80057d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	1ad2      	subs	r2, r2, r3
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057e6:	69b8      	ldr	r0, [r7, #24]
 80057e8:	f000 f8f8 	bl	80059dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057ec:	4b1a      	ldr	r3, [pc, #104]	; (8005858 <pvPortMalloc+0x17c>)
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	4a18      	ldr	r2, [pc, #96]	; (8005858 <pvPortMalloc+0x17c>)
 80057f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057fa:	4b17      	ldr	r3, [pc, #92]	; (8005858 <pvPortMalloc+0x17c>)
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4b18      	ldr	r3, [pc, #96]	; (8005860 <pvPortMalloc+0x184>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d203      	bcs.n	800580e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005806:	4b14      	ldr	r3, [pc, #80]	; (8005858 <pvPortMalloc+0x17c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a15      	ldr	r2, [pc, #84]	; (8005860 <pvPortMalloc+0x184>)
 800580c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	4b10      	ldr	r3, [pc, #64]	; (8005854 <pvPortMalloc+0x178>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	431a      	orrs	r2, r3
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005822:	f7fe fa79 	bl	8003d18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <pvPortMalloc+0x16a>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	60fb      	str	r3, [r7, #12]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <pvPortMalloc+0x168>
	return pvReturn;
 8005846:	69fb      	ldr	r3, [r7, #28]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3728      	adds	r7, #40	; 0x28
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20001934 	.word	0x20001934
 8005854:	20001940 	.word	0x20001940
 8005858:	20001938 	.word	0x20001938
 800585c:	2000192c 	.word	0x2000192c
 8005860:	2000193c 	.word	0x2000193c

08005864 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d048      	beq.n	8005908 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005876:	2308      	movs	r3, #8
 8005878:	425b      	negs	r3, r3
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4413      	add	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	4b21      	ldr	r3, [pc, #132]	; (8005910 <vPortFree+0xac>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4013      	ands	r3, r2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <vPortFree+0x44>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	60fb      	str	r3, [r7, #12]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <vPortFree+0x62>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	60bb      	str	r3, [r7, #8]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	4b11      	ldr	r3, [pc, #68]	; (8005910 <vPortFree+0xac>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d019      	beq.n	8005908 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d115      	bne.n	8005908 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <vPortFree+0xac>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	43db      	mvns	r3, r3
 80058e6:	401a      	ands	r2, r3
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058ec:	f7fe fa06 	bl	8003cfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	4b07      	ldr	r3, [pc, #28]	; (8005914 <vPortFree+0xb0>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4413      	add	r3, r2
 80058fa:	4a06      	ldr	r2, [pc, #24]	; (8005914 <vPortFree+0xb0>)
 80058fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058fe:	6938      	ldr	r0, [r7, #16]
 8005900:	f000 f86c 	bl	80059dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005904:	f7fe fa08 	bl	8003d18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005908:	bf00      	nop
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20001940 	.word	0x20001940
 8005914:	20001938 	.word	0x20001938

08005918 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800591e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005922:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005924:	4b27      	ldr	r3, [pc, #156]	; (80059c4 <prvHeapInit+0xac>)
 8005926:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00c      	beq.n	800594c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3307      	adds	r3, #7
 8005936:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0307 	bic.w	r3, r3, #7
 800593e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	4a1f      	ldr	r2, [pc, #124]	; (80059c4 <prvHeapInit+0xac>)
 8005948:	4413      	add	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005950:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <prvHeapInit+0xb0>)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005956:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <prvHeapInit+0xb0>)
 8005958:	2200      	movs	r2, #0
 800595a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	4413      	add	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005964:	2208      	movs	r2, #8
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0307 	bic.w	r3, r3, #7
 8005972:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a15      	ldr	r2, [pc, #84]	; (80059cc <prvHeapInit+0xb4>)
 8005978:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800597a:	4b14      	ldr	r3, [pc, #80]	; (80059cc <prvHeapInit+0xb4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <prvHeapInit+0xb4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	1ad2      	subs	r2, r2, r3
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <prvHeapInit+0xb4>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4a0a      	ldr	r2, [pc, #40]	; (80059d0 <prvHeapInit+0xb8>)
 80059a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <prvHeapInit+0xbc>)
 80059ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059b0:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <prvHeapInit+0xc0>)
 80059b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059b6:	601a      	str	r2, [r3, #0]
}
 80059b8:	bf00      	nop
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000d2c 	.word	0x20000d2c
 80059c8:	2000192c 	.word	0x2000192c
 80059cc:	20001934 	.word	0x20001934
 80059d0:	2000193c 	.word	0x2000193c
 80059d4:	20001938 	.word	0x20001938
 80059d8:	20001940 	.word	0x20001940

080059dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059e4:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <prvInsertBlockIntoFreeList+0xa8>)
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	e002      	b.n	80059f0 <prvInsertBlockIntoFreeList+0x14>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d8f7      	bhi.n	80059ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	4413      	add	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d108      	bne.n	8005a1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	441a      	add	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	441a      	add	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d118      	bne.n	8005a64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <prvInsertBlockIntoFreeList+0xac>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d00d      	beq.n	8005a5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	441a      	add	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e008      	b.n	8005a6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a5a:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <prvInsertBlockIntoFreeList+0xac>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	e003      	b.n	8005a6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d002      	beq.n	8005a7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr
 8005a84:	2000192c 	.word	0x2000192c
 8005a88:	20001934 	.word	0x20001934

08005a8c <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	78fa      	ldrb	r2, [r7, #3]
 8005aa4:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005aac:	3301      	adds	r3, #1
 8005aae:	425a      	negs	r2, r3
 8005ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ab8:	bf58      	it	pl
 8005aba:	4253      	negpl	r3, r2
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8005aca:	2b80      	cmp	r3, #128	; 0x80
 8005acc:	d113      	bne.n	8005af6 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005adc:	3301      	adds	r3, #1
 8005ade:	425a      	negs	r2, r3
 8005ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ae8:	bf58      	it	pl
 8005aea:	4253      	negpl	r3, r2
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8005af4:	e00b      	b.n	8005b0e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8005b04:	3301      	adds	r3, #1
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f805 	bl	8005b3c <RingGetNBytes>
 8005b32:	4603      	mov	r3, r0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <RingGetNBytes+0x1e>
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <RingGetNBytes+0x22>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e03e      	b.n	8005bdc <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	2b80      	cmp	r3, #128	; 0x80
 8005b62:	d901      	bls.n	8005b68 <RingGetNBytes+0x2c>
 8005b64:	2300      	movs	r3, #0
 8005b66:	e039      	b.n	8005bdc <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	75fb      	strb	r3, [r7, #23]
 8005b6c:	e01b      	b.n	8005ba6 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b74:	4619      	mov	r1, r3
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	5c52      	ldrb	r2, [r2, r1]
 8005b80:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b88:	3301      	adds	r3, #1
 8005b8a:	425a      	negs	r2, r3
 8005b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b94:	bf58      	it	pl
 8005b96:	4253      	negpl	r3, r2
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	75fb      	strb	r3, [r7, #23]
 8005ba6:	7dfa      	ldrb	r2, [r7, #23]
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d205      	bcs.n	8005bba <RingGetNBytes+0x7e>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8005bb4:	7dfa      	ldrb	r2, [r7, #23]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d3d9      	bcc.n	8005b6e <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f805 	bl	8005be4 <RingClear>

	return uCounter;
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr
	...

08005c18 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8005c20:	4b42      	ldr	r3, [pc, #264]	; (8005d2c <ModbusInit+0x114>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d87d      	bhi.n	8005d24 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	33bc      	adds	r3, #188	; 0xbc
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff ffd9 	bl	8005be4 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d109      	bne.n	8005c4e <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8005c3a:	4a3d      	ldr	r2, [pc, #244]	; (8005d30 <ModbusInit+0x118>)
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	483d      	ldr	r0, [pc, #244]	; (8005d34 <ModbusInit+0x11c>)
 8005c40:	f7fc fc52 	bl	80024e8 <osThreadNew>
 8005c44:	4602      	mov	r2, r0
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8005c4c:	e033      	b.n	8005cb6 <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d12e      	bne.n	8005cb4 <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8005c56:	4a38      	ldr	r2, [pc, #224]	; (8005d38 <ModbusInit+0x120>)
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	4838      	ldr	r0, [pc, #224]	; (8005d3c <ModbusInit+0x124>)
 8005c5c:	f7fc fc44 	bl	80024e8 <osThreadNew>
 8005c60:	4602      	mov	r2, r0
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8005c6e:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8005c76:	4a32      	ldr	r2, [pc, #200]	; (8005d40 <ModbusInit+0x128>)
 8005c78:	9200      	str	r2, [sp, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	4831      	ldr	r0, [pc, #196]	; (8005d44 <ModbusInit+0x12c>)
 8005c7e:	f7ff f81b 	bl	8004cb8 <xTimerCreate>
 8005c82:	4602      	mov	r2, r0
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d100      	bne.n	8005c96 <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 8005c94:	e7fe      	b.n	8005c94 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8005c96:	4a2c      	ldr	r2, [pc, #176]	; (8005d48 <ModbusInit+0x130>)
 8005c98:	2110      	movs	r1, #16
 8005c9a:	2002      	movs	r0, #2
 8005c9c:	f7fc fd98 	bl	80027d0 <osMessageQueueNew>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8005cb2:	e7fe      	b.n	8005cb2 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8005cb4:	e7fe      	b.n	8005cb4 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d100      	bne.n	8005cc2 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8005cc0:	e7fe      	b.n	8005cc0 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8005cc8:	4a20      	ldr	r2, [pc, #128]	; (8005d4c <ModbusInit+0x134>)
 8005cca:	9200      	str	r2, [sp, #0]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2105      	movs	r1, #5
 8005cd0:	481f      	ldr	r0, [pc, #124]	; (8005d50 <ModbusInit+0x138>)
 8005cd2:	f7fe fff1 	bl	8004cb8 <xTimerCreate>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d100      	bne.n	8005cea <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8005ce8:	e7fe      	b.n	8005ce8 <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8005cea:	4a1a      	ldr	r2, [pc, #104]	; (8005d54 <ModbusInit+0x13c>)
 8005cec:	2101      	movs	r1, #1
 8005cee:	2001      	movs	r0, #1
 8005cf0:	f7fc fcd2 	bl	8002698 <osSemaphoreNew>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d100      	bne.n	8005d08 <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8005d06:	e7fe      	b.n	8005d06 <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 8005d08:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <ModbusInit+0x114>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4a12      	ldr	r2, [pc, #72]	; (8005d58 <ModbusInit+0x140>)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <ModbusInit+0x114>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <ModbusInit+0x114>)
 8005d20:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8005d22:	e000      	b.n	8005d26 <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 8005d24:	e7fe      	b.n	8005d24 <ModbusInit+0x10c>
}
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20001944 	.word	0x20001944
 8005d30:	08007494 	.word	0x08007494
 8005d34:	08005f45 	.word	0x08005f45
 8005d38:	080074b8 	.word	0x080074b8
 8005d3c:	080063b9 	.word	0x080063b9
 8005d40:	08005ee9 	.word	0x08005ee9
 8005d44:	08007400 	.word	0x08007400
 8005d48:	0800747c 	.word	0x0800747c
 8005d4c:	08005e65 	.word	0x08005e65
 8005d50:	08007410 	.word	0x08007410
 8005d54:	080074dc 	.word	0x080074dc
 8005d58:	2000194c 	.word	0x2000194c

08005d5c <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d00f      	beq.n	8005d8e <ModbusStart+0x32>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d00a      	beq.n	8005d8e <ModbusStart+0x32>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d005      	beq.n	8005d8e <ModbusStart+0x32>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005d88:	2b04      	cmp	r3, #4
 8005d8a:	d000      	beq.n	8005d8e <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 8005d8c:	e7fe      	b.n	8005d8c <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d100      	bne.n	8005d9a <ModbusStart+0x3e>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8005d98:	e7fe      	b.n	8005d98 <ModbusStart+0x3c>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d004      	beq.n	8005dae <ModbusStart+0x52>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d13c      	bne.n	8005e28 <ModbusStart+0xcc>
	{

	      if (modH->EN_Port != NULL )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <ModbusStart+0x6a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68d8      	ldr	r0, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	8a1b      	ldrh	r3, [r3, #16]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f7fa fff1 	bl	8000da8 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d105      	bne.n	8005dda <ModbusStart+0x7e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d100      	bne.n	8005dda <ModbusStart+0x7e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8005dd8:	e7fe      	b.n	8005dd8 <ModbusStart+0x7c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8005dda:	bf00      	nop
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fc f943 	bl	800206c <HAL_UART_GetState>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d1f7      	bne.n	8005ddc <ModbusStart+0x80>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6858      	ldr	r0, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	33a6      	adds	r3, #166	; 0xa6
 8005df4:	2201      	movs	r2, #1
 8005df6:	4619      	mov	r1, r3
 8005df8:	f7fb ff13 	bl	8001c22 <HAL_UART_Receive_IT>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d000      	beq.n	8005e04 <ModbusStart+0xa8>
          {
                while(1)
 8005e02:	e7fe      	b.n	8005e02 <ModbusStart+0xa6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	7a1b      	ldrb	r3, [r3, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d004      	beq.n	8005e16 <ModbusStart+0xba>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d100      	bne.n	8005e16 <ModbusStart+0xba>
          {
        	  while(1)
 8005e14:	e7fe      	b.n	8005e14 <ModbusStart+0xb8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	7a1b      	ldrb	r3, [r3, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <ModbusStart+0xcc>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d100      	bne.n	8005e28 <ModbusStart+0xcc>
          {
             	  while(1)
 8005e26:	e7fe      	b.n	8005e26 <ModbusStart+0xca>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	e02a      	b.n	8005ec8 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8005e72:	4a1b      	ldr	r2, [pc, #108]	; (8005ee0 <vTimerCallbackT35+0x7c>)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d11e      	bne.n	8005ec2 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8005e84:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <vTimerCallbackT35+0x7c>)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d10c      	bne.n	8005eac <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8005e92:	4a13      	ldr	r2, [pc, #76]	; (8005ee0 <vTimerCallbackT35+0x7c>)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e9a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	2103      	movs	r1, #3
 8005ea8:	f7fe ff5a 	bl	8004d60 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8005eac:	4a0c      	ldr	r2, [pc, #48]	; (8005ee0 <vTimerCallbackT35+0x7c>)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb4:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8005eb8:	2300      	movs	r3, #0
 8005eba:	2203      	movs	r2, #3
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	f7fe fcf1 	bl	80048a4 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <vTimerCallbackT35+0x80>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	dbce      	blt.n	8005e72 <vTimerCallbackT35+0xe>
		}

	}
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	2000194c 	.word	0x2000194c
 8005ee4:	20001944 	.word	0x20001944

08005ee8 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	e017      	b.n	8005f26 <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8005ef6:	4a11      	ldr	r2, [pc, #68]	; (8005f3c <vTimerCallbackTimeout+0x54>)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005efe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d10b      	bne.n	8005f20 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8005f08:	4a0c      	ldr	r2, [pc, #48]	; (8005f3c <vTimerCallbackTimeout+0x54>)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f10:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8005f14:	2300      	movs	r3, #0
 8005f16:	2203      	movs	r2, #3
 8005f18:	f06f 0107 	mvn.w	r1, #7
 8005f1c:	f7fe fcc2 	bl	80048a4 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3301      	adds	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	4b06      	ldr	r3, [pc, #24]	; (8005f40 <vTimerCallbackTimeout+0x58>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	dbe1      	blt.n	8005ef6 <vTimerCallbackTimeout+0xe>
		}

	}

}
 8005f32:	bf00      	nop
 8005f34:	bf00      	nop
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	2000194c 	.word	0x2000194c
 8005f40:	20001944 	.word	0x20001944

08005f44 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d004      	beq.n	8005f6a <StartTaskModbusSlave+0x26>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d117      	bne.n	8005f9a <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8005f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8005f6e:	2001      	movs	r0, #1
 8005f70:	f7fe fc50 	bl	8004814 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 fbe9 	bl	800674c <getRxBuffer>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f113 0f03 	cmn.w	r3, #3
 8005f80:	d10b      	bne.n	8005f9a <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	22fd      	movs	r2, #253	; 0xfd
 8005f86:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005f8e:	3301      	adds	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 8005f98:	e0a1      	b.n	80060de <StartTaskModbusSlave+0x19a>
	  }
	   //modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
   }

   if (modH->u8BufferSize < 7)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005fa0:	2b06      	cmp	r3, #6
 8005fa2:	d80b      	bhi.n	8005fbc <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	22fa      	movs	r2, #250	; 0xfa
 8005fa8:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	  {
		  netconn_close(modH->newconn);
		  netconn_delete(modH->newconn);
	  }
  #endif
	  continue;
 8005fba:	e090      	b.n	80060de <StartTaskModbusSlave+0x19a>
    }

		// check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)   //for Modbus TCP this is not validated, user should modify accordingly if needed
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	7cda      	ldrb	r2, [r3, #19]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	7a1b      	ldrb	r3, [r3, #8]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	f040 8089 	bne.w	80060dc <StartTaskModbusSlave+0x198>
        #endif
		continue;
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 fc08 	bl	80067e0 <validateRequest>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8005fd4:	7afb      	ldrb	r3, [r7, #11]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 8005fda:	7afb      	ldrb	r3, [r7, #11]
 8005fdc:	68f9      	ldr	r1, [r7, #12]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fda0 	bl	8006b24 <buildException>
			sendTxBuffer(modH);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fdbb 	bl	8006b60 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8005fea:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	749a      	strb	r2, [r3, #18]
		{
		    netconn_close(modH->newconn);
		  	netconn_delete(modH->newconn);
		}
        #endif
		continue;
 8005ff2:	e074      	b.n	80060de <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	749a      	strb	r2, [r3, #18]
	 xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006000:	f04f 31ff 	mov.w	r1, #4294967295
 8006004:	4618      	mov	r0, r3
 8006006:	f7fd f96b 	bl	80032e0 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	7d1b      	ldrb	r3, [r3, #20]
 800600e:	3b01      	subs	r3, #1
 8006010:	2b0f      	cmp	r3, #15
 8006012:	d859      	bhi.n	80060c8 <StartTaskModbusSlave+0x184>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <StartTaskModbusSlave+0xd8>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	0800605d 	.word	0x0800605d
 8006020:	0800605d 	.word	0x0800605d
 8006024:	0800606f 	.word	0x0800606f
 8006028:	0800606f 	.word	0x0800606f
 800602c:	08006081 	.word	0x08006081
 8006030:	08006093 	.word	0x08006093
 8006034:	080060c9 	.word	0x080060c9
 8006038:	080060c9 	.word	0x080060c9
 800603c:	080060c9 	.word	0x080060c9
 8006040:	080060c9 	.word	0x080060c9
 8006044:	080060c9 	.word	0x080060c9
 8006048:	080060c9 	.word	0x080060c9
 800604c:	080060c9 	.word	0x080060c9
 8006050:	080060c9 	.word	0x080060c9
 8006054:	080060a5 	.word	0x080060a5
 8006058:	080060b7 	.word	0x080060b7
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 fe0f 	bl	8006c80 <process_FC1>
 8006062:	4603      	mov	r3, r0
 8006064:	461a      	mov	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800606c:	e02d      	b.n	80060ca <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 febb 	bl	8006dea <process_FC3>
 8006074:	4603      	mov	r3, r0
 8006076:	461a      	mov	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800607e:	e024      	b.n	80060ca <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 ff1d 	bl	8006ec0 <process_FC5>
 8006086:	4603      	mov	r3, r0
 8006088:	461a      	mov	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8006090:	e01b      	b.n	80060ca <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 ff6d 	bl	8006f72 <process_FC6>
 8006098:	4603      	mov	r3, r0
 800609a:	461a      	mov	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80060a2:	e012      	b.n	80060ca <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 ff96 	bl	8006fd6 <process_FC15>
 80060aa:	4603      	mov	r3, r0
 80060ac:	461a      	mov	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80060b4:	e009      	b.n	80060ca <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f001 f81b 	bl	80070f2 <process_FC16>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80060c6:	e000      	b.n	80060ca <StartTaskModbusSlave+0x186>
			default:
				break;
 80060c8:	bf00      	nop
	    netconn_close(modH->newconn);
	  	netconn_delete(modH->newconn);
	 }
   #endif

	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80060d0:	2300      	movs	r3, #0
 80060d2:	2200      	movs	r2, #0
 80060d4:	2100      	movs	r1, #0
 80060d6:	f7fc fe8d 	bl	8002df4 <xQueueGenericSend>

	 continue;
 80060da:	e000      	b.n	80060de <StartTaskModbusSlave+0x19a>
		continue;
 80060dc:	bf00      	nop
  {
 80060de:	e737      	b.n	8005f50 <StartTaskModbusSlave+0xc>

080060e0 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 80060e0:	b084      	sub	sp, #16
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	f107 001c 	add.w	r0, r7, #28
 80060ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80060fc:	f04f 31ff 	mov.w	r1, #4294967295
 8006100:	4618      	mov	r0, r3
 8006102:	f7fd f8ed 	bl	80032e0 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	7a1b      	ldrb	r3, [r3, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <SendQuery+0x32>
 800610e:	23ff      	movs	r3, #255	; 0xff
 8006110:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <SendQuery+0x40>
 800611c:	23fe      	movs	r3, #254	; 0xfe
 800611e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8006120:	7f3b      	ldrb	r3, [r7, #28]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <SendQuery+0x4c>
 8006126:	7f3b      	ldrb	r3, [r7, #28]
 8006128:	2bf7      	cmp	r3, #247	; 0xf7
 800612a:	d901      	bls.n	8006130 <SendQuery+0x50>
 800612c:	23f7      	movs	r3, #247	; 0xf7
 800612e:	73bb      	strb	r3, [r7, #14]

	if(error)
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 8006136:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8006144:	2300      	movs	r3, #0
 8006146:	2200      	movs	r2, #0
 8006148:	2100      	movs	r1, #0
 800614a:	f7fc fe53 	bl	8002df4 <xQueueGenericSend>
		 return error;
 800614e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006152:	e129      	b.n	80063a8 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8006154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800615c:	7f3a      	ldrb	r2, [r7, #28]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8006162:	7f7a      	ldrb	r2, [r7, #29]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8006168:	8bfb      	ldrh	r3, [r7, #30]
 800616a:	0a1b      	lsrs	r3, r3, #8
 800616c:	b29b      	uxth	r3, r3
 800616e:	b2da      	uxtb	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8006174:	8bfb      	ldrh	r3, [r7, #30]
 8006176:	b2da      	uxtb	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800617c:	7f7b      	ldrb	r3, [r7, #29]
 800617e:	3b01      	subs	r3, #1
 8006180:	2b0f      	cmp	r3, #15
 8006182:	f200 80fe 	bhi.w	8006382 <SendQuery+0x2a2>
 8006186:	a201      	add	r2, pc, #4	; (adr r2, 800618c <SendQuery+0xac>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061cd 	.word	0x080061cd
 8006190:	080061cd 	.word	0x080061cd
 8006194:	080061cd 	.word	0x080061cd
 8006198:	080061cd 	.word	0x080061cd
 800619c:	080061eb 	.word	0x080061eb
 80061a0:	0800620d 	.word	0x0800620d
 80061a4:	08006383 	.word	0x08006383
 80061a8:	08006383 	.word	0x08006383
 80061ac:	08006383 	.word	0x08006383
 80061b0:	08006383 	.word	0x08006383
 80061b4:	08006383 	.word	0x08006383
 80061b8:	08006383 	.word	0x08006383
 80061bc:	08006383 	.word	0x08006383
 80061c0:	08006383 	.word	0x08006383
 80061c4:	0800622f 	.word	0x0800622f
 80061c8:	080062ed 	.word	0x080062ed
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80061cc:	8c3b      	ldrh	r3, [r7, #32]
 80061ce:	0a1b      	lsrs	r3, r3, #8
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80061d8:	8c3b      	ldrh	r3, [r7, #32]
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2206      	movs	r2, #6
 80061e4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80061e8:	e0cb      	b.n	8006382 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <SendQuery+0x116>
 80061f2:	22ff      	movs	r2, #255	; 0xff
 80061f4:	e000      	b.n	80061f8 <SendQuery+0x118>
 80061f6:	2200      	movs	r2, #0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2206      	movs	r2, #6
 8006206:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800620a:	e0ba      	b.n	8006382 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	0a1b      	lsrs	r3, r3, #8
 8006212:	b29b      	uxth	r3, r3
 8006214:	b2da      	uxtb	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b2da      	uxtb	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2206      	movs	r2, #6
 8006228:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800622c:	e0a9      	b.n	8006382 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800622e:	8c3b      	ldrh	r3, [r7, #32]
 8006230:	091b      	lsrs	r3, r3, #4
 8006232:	b29b      	uxth	r3, r3
 8006234:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 8006236:	7a7b      	ldrb	r3, [r7, #9]
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800623c:	8c3b      	ldrh	r3, [r7, #32]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <SendQuery+0x174>
	    {
	        u8bytesno++;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	3301      	adds	r3, #1
 800624c:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800624e:	7a7b      	ldrb	r3, [r7, #9]
 8006250:	3301      	adds	r3, #1
 8006252:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8006254:	8c3b      	ldrh	r3, [r7, #32]
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	b29b      	uxth	r3, r3
 800625a:	b2da      	uxtb	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8006260:	8c3b      	ldrh	r3, [r7, #32]
 8006262:	b2da      	uxtb	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	7bfa      	ldrb	r2, [r7, #15]
 800626c:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2207      	movs	r2, #7
 8006272:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8006276:	2300      	movs	r3, #0
 8006278:	81bb      	strh	r3, [r7, #12]
 800627a:	e031      	b.n	80062e0 <SendQuery+0x200>
	    {
	        if(i%2)
 800627c:	89bb      	ldrh	r3, [r7, #12]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00f      	beq.n	80062a8 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8006288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628a:	89bb      	ldrh	r3, [r7, #12]
 800628c:	085b      	lsrs	r3, r3, #1
 800628e:	b29b      	uxth	r3, r3
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	4413      	add	r3, r2
 8006294:	881a      	ldrh	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800629c:	4619      	mov	r1, r3
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	440b      	add	r3, r1
 80062a4:	74da      	strb	r2, [r3, #19]
 80062a6:	e010      	b.n	80062ca <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 80062a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062aa:	89bb      	ldrh	r3, [r7, #12]
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	0a1b      	lsrs	r3, r3, #8
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80062c0:	4619      	mov	r1, r3
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	440b      	add	r3, r1
 80062c8:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80062d0:	3301      	adds	r3, #1
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80062da:	89bb      	ldrh	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	81bb      	strh	r3, [r7, #12]
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	89ba      	ldrh	r2, [r7, #12]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d3c8      	bcc.n	800627c <SendQuery+0x19c>
	    }
	    break;
 80062ea:	e04a      	b.n	8006382 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80062ec:	8c3b      	ldrh	r3, [r7, #32]
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80062f8:	8c3b      	ldrh	r3, [r7, #32]
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8006300:	8c3b      	ldrh	r3, [r7, #32]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	b2da      	uxtb	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2207      	movs	r2, #7
 8006310:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8006314:	2300      	movs	r3, #0
 8006316:	817b      	strh	r3, [r7, #10]
 8006318:	e02e      	b.n	8006378 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800631a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631c:	897b      	ldrh	r3, [r7, #10]
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	0a1b      	lsrs	r3, r3, #8
 8006326:	b29a      	uxth	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800632e:	4619      	mov	r1, r3
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	440b      	add	r3, r1
 8006336:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800633e:	3301      	adds	r3, #1
 8006340:	b2da      	uxtb	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8006348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634a:	897b      	ldrh	r3, [r7, #10]
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	4413      	add	r3, r2
 8006350:	881a      	ldrh	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006358:	4619      	mov	r1, r3
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	440b      	add	r3, r1
 8006360:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006368:	3301      	adds	r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8006372:	897b      	ldrh	r3, [r7, #10]
 8006374:	3301      	adds	r3, #1
 8006376:	817b      	strh	r3, [r7, #10]
 8006378:	8c3b      	ldrh	r3, [r7, #32]
 800637a:	897a      	ldrh	r2, [r7, #10]
 800637c:	429a      	cmp	r2, r3
 800637e:	d3cc      	bcc.n	800631a <SendQuery+0x23a>
	    }
	    break;
 8006380:	bf00      	nop
	}

	sendTxBuffer(modH);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fbec 	bl	8006b60 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800638e:	2300      	movs	r3, #0
 8006390:	2200      	movs	r2, #0
 8006392:	2100      	movs	r1, #0
 8006394:	f7fc fd2e 	bl	8002df4 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	749a      	strb	r2, [r3, #18]
	return 0;
 80063a6:	2300      	movs	r3, #0


}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063b2:	b004      	add	sp, #16
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop

080063b8 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08c      	sub	sp, #48	; 0x30
 80063bc:	af02      	add	r7, sp, #8
 80063be:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063ca:	f107 010c 	add.w	r1, r7, #12
 80063ce:	f04f 32ff 	mov.w	r2, #4294967295
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fc fea4 	bl	8003120 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	f107 030c 	add.w	r3, r7, #12
 80063e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063e4:	f7ff fe7c 	bl	80060e0 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80063e8:	f04f 31ff 	mov.w	r1, #4294967295
 80063ec:	2001      	movs	r0, #1
 80063ee:	f7fe fa11 	bl	8004814 <ulTaskNotifyTake>
 80063f2:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	2200      	movs	r2, #0
 80063f8:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d018      	beq.n	8006432 <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	2200      	movs	r2, #0
 8006404:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	22f8      	movs	r2, #248	; 0xf8
 800640c:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8006414:	3301      	adds	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800641e:	69b8      	ldr	r0, [r7, #24]
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8006426:	4619      	mov	r1, r3
 8006428:	2300      	movs	r3, #0
 800642a:	2203      	movs	r2, #3
 800642c:	f7fe fa3a 	bl	80048a4 <xTaskGenericNotify>
    	  continue;
 8006430:	e097      	b.n	8006562 <StartTaskModbusMaster+0x1aa>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 8006432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006434:	f000 f98a 	bl	800674c <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800643e:	2b05      	cmp	r3, #5
 8006440:	d818      	bhi.n	8006474 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	2200      	movs	r2, #0
 8006446:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	22fa      	movs	r2, #250	; 0xfa
 800644e:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8006456:	3301      	adds	r3, #1
 8006458:	b29a      	uxth	r2, r3
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8006460:	69b8      	ldr	r0, [r7, #24]
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8006468:	4619      	mov	r1, r3
 800646a:	2300      	movs	r3, #0
 800646c:	2203      	movs	r2, #3
 800646e:	f7fe fa19 	bl	80048a4 <xTaskGenericNotify>
		  continue;
 8006472:	e076      	b.n	8006562 <StartTaskModbusMaster+0x1aa>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800647a:	2300      	movs	r3, #0
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	2300      	movs	r3, #0
 8006480:	2200      	movs	r2, #0
 8006482:	2103      	movs	r1, #3
 8006484:	f7fe fc6c 	bl	8004d60 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8006488:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800648a:	f000 f8f1 	bl	8006670 <validateAnswer>
 800648e:	4603      	mov	r3, r0
 8006490:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8006492:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d010      	beq.n	80064bc <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	2200      	movs	r2, #0
 800649e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	7ffa      	ldrb	r2, [r7, #31]
 80064a6:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80064a8:	69b8      	ldr	r0, [r7, #24]
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80064b0:	4619      	mov	r1, r3
 80064b2:	2300      	movs	r3, #0
 80064b4:	2203      	movs	r2, #3
 80064b6:	f7fe f9f5 	bl	80048a4 <xTaskGenericNotify>
	     continue;
 80064ba:	e052      	b.n	8006562 <StartTaskModbusMaster+0x1aa>
	  }

	  modH->i8lastError = u8exception;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	7ffa      	ldrb	r2, [r7, #31]
 80064c0:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80064c8:	f04f 31ff 	mov.w	r1, #4294967295
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fc ff07 	bl	80032e0 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	7d1b      	ldrb	r3, [r3, #20]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	2b0f      	cmp	r3, #15
 80064da:	d82b      	bhi.n	8006534 <StartTaskModbusMaster+0x17c>
 80064dc:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <StartTaskModbusMaster+0x12c>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	08006525 	.word	0x08006525
 80064e8:	08006525 	.word	0x08006525
 80064ec:	0800652d 	.word	0x0800652d
 80064f0:	0800652d 	.word	0x0800652d
 80064f4:	08006535 	.word	0x08006535
 80064f8:	08006535 	.word	0x08006535
 80064fc:	08006535 	.word	0x08006535
 8006500:	08006535 	.word	0x08006535
 8006504:	08006535 	.word	0x08006535
 8006508:	08006535 	.word	0x08006535
 800650c:	08006535 	.word	0x08006535
 8006510:	08006535 	.word	0x08006535
 8006514:	08006535 	.word	0x08006535
 8006518:	08006535 	.word	0x08006535
 800651c:	08006535 	.word	0x08006535
 8006520:	08006535 	.word	0x08006535
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 8006524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006526:	f000 f81d 	bl	8006564 <get_FC1>
	      break;
 800652a:	e004      	b.n	8006536 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 800652c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800652e:	f000 f870 	bl	8006612 <get_FC3>
	      break;
 8006532:	e000      	b.n	8006536 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8006534:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	2200      	movs	r2, #0
 800653a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8006544:	2300      	movs	r3, #0
 8006546:	2200      	movs	r2, #0
 8006548:	2100      	movs	r1, #0
 800654a:	f7fc fc53 	bl	8002df4 <xQueueGenericSend>
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800654e:	69b8      	ldr	r0, [r7, #24]
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8006556:	4619      	mov	r1, r3
 8006558:	2300      	movs	r3, #0
 800655a:	2203      	movs	r2, #3
 800655c:	f7fe f9a2 	bl	80048a4 <xTaskGenericNotify>
	  continue;
 8006560:	bf00      	nop
  {
 8006562:	e72f      	b.n	80063c4 <StartTaskModbusMaster+0xc>

08006564 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8006564:	b590      	push	{r4, r7, lr}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800656c:	2303      	movs	r3, #3
 800656e:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8006570:	2300      	movs	r3, #0
 8006572:	73fb      	strb	r3, [r7, #15]
 8006574:	e043      	b.n	80065fe <get_FC1+0x9a>

        if(i%2)
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d01c      	beq.n	80065bc <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8006582:	7bfa      	ldrb	r2, [r7, #15]
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	4413      	add	r3, r2
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	4413      	add	r3, r2
 800658c:	7cd8      	ldrb	r0, [r3, #19]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	085b      	lsrs	r3, r3, #1
 8006598:	b2db      	uxtb	r3, r3
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	4413      	add	r3, r2
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b2d9      	uxtb	r1, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	18d4      	adds	r4, r2, r3
 80065b2:	f000 fa5f 	bl	8006a74 <word>
 80065b6:	4603      	mov	r3, r0
 80065b8:	8023      	strh	r3, [r4, #0]
 80065ba:	e01d      	b.n	80065f8 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	0a1b      	lsrs	r3, r3, #8
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	b2d8      	uxtb	r0, r3
 80065d4:	7bfa      	ldrb	r2, [r7, #15]
 80065d6:	7bbb      	ldrb	r3, [r7, #14]
 80065d8:	4413      	add	r3, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	7cd9      	ldrb	r1, [r3, #19]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	085b      	lsrs	r3, r3, #1
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	18d4      	adds	r4, r2, r3
 80065f0:	f000 fa40 	bl	8006a74 <word>
 80065f4:	4603      	mov	r3, r0
 80065f6:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	3301      	adds	r3, #1
 80065fc:	73fb      	strb	r3, [r7, #15]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	7d5b      	ldrb	r3, [r3, #21]
 8006602:	7bfa      	ldrb	r2, [r7, #15]
 8006604:	429a      	cmp	r2, r3
 8006606:	d3b6      	bcc.n	8006576 <get_FC1+0x12>
        }

     }
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	bd90      	pop	{r4, r7, pc}

08006612 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8006612:	b590      	push	{r4, r7, lr}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800661a:	2303      	movs	r3, #3
 800661c:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800661e:	2300      	movs	r3, #0
 8006620:	73bb      	strb	r3, [r7, #14]
 8006622:	e018      	b.n	8006656 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	4413      	add	r3, r2
 800662a:	7cd8      	ldrb	r0, [r3, #19]
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	3301      	adds	r3, #1
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4413      	add	r3, r2
 8006634:	7cd9      	ldrb	r1, [r3, #19]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	18d4      	adds	r4, r2, r3
 8006642:	f000 fa17 	bl	8006a74 <word>
 8006646:	4603      	mov	r3, r0
 8006648:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	3302      	adds	r3, #2
 800664e:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8006650:	7bbb      	ldrb	r3, [r7, #14]
 8006652:	3301      	adds	r3, #1
 8006654:	73bb      	strb	r3, [r7, #14]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	7d5b      	ldrb	r3, [r3, #21]
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	b2db      	uxtb	r3, r3
 800665e:	7bba      	ldrb	r2, [r7, #14]
 8006660:	429a      	cmp	r2, r3
 8006662:	d3df      	bcc.n	8006624 <get_FC3+0x12>
    }
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	bd90      	pop	{r4, r7, pc}
	...

08006670 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800667e:	3b02      	subs	r3, #2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	4413      	add	r3, r2
 8006684:	7cdb      	ldrb	r3, [r3, #19]
 8006686:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8006688:	b21a      	sxth	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006690:	3b01      	subs	r3, #1
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	440b      	add	r3, r1
 8006696:	7cdb      	ldrb	r3, [r3, #19]
 8006698:	b21b      	sxth	r3, r3
 800669a:	4313      	orrs	r3, r2
 800669c:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800669e:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f103 0213 	add.w	r2, r3, #19
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80066ac:	3b02      	subs	r3, #2
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	4619      	mov	r1, r3
 80066b2:	4610      	mov	r0, r2
 80066b4:	f000 f9f0 	bl	8006a98 <calcCRC>
 80066b8:	4603      	mov	r3, r0
 80066ba:	461a      	mov	r2, r3
 80066bc:	89bb      	ldrh	r3, [r7, #12]
 80066be:	4293      	cmp	r3, r2
 80066c0:	d009      	beq.n	80066d6 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80066c8:	3301      	adds	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 80066d2:	23fc      	movs	r3, #252	; 0xfc
 80066d4:	e034      	b.n	8006740 <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	7d1b      	ldrb	r3, [r3, #20]
 80066da:	b25b      	sxtb	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	da09      	bge.n	80066f4 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80066e6:	3301      	adds	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 80066f0:	23fb      	movs	r3, #251	; 0xfb
 80066f2:	e025      	b.n	8006740 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80066f8:	2300      	movs	r3, #0
 80066fa:	73bb      	strb	r3, [r7, #14]
 80066fc:	e00c      	b.n	8006718 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	4a11      	ldr	r2, [pc, #68]	; (8006748 <validateAnswer+0xd8>)
 8006702:	5cd2      	ldrb	r2, [r2, r3]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	7d1b      	ldrb	r3, [r3, #20]
 8006708:	429a      	cmp	r2, r3
 800670a:	d102      	bne.n	8006712 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800670c:	2301      	movs	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]
            break;
 8006710:	e005      	b.n	800671e <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	3301      	adds	r3, #1
 8006716:	73bb      	strb	r3, [r7, #14]
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	2b07      	cmp	r3, #7
 800671c:	d9ef      	bls.n	80066fe <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	f083 0301 	eor.w	r3, r3, #1
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8006730:	3301      	adds	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	080074ec 	.word	0x080074ec

0800674c <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800675a:	2b01      	cmp	r3, #1
 800675c:	d104      	bne.n	8006768 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	4618      	mov	r0, r3
 8006764:	f7fb fab2 	bl	8001ccc <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800676e:	2b00      	cmp	r3, #0
 8006770:	d008      	beq.n	8006784 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	33bc      	adds	r3, #188	; 0xbc
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff fa34 	bl	8005be4 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800677c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8006780:	81fb      	strh	r3, [r7, #14]
 8006782:	e019      	b.n	80067b8 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3313      	adds	r3, #19
 800678e:	4619      	mov	r1, r3
 8006790:	4610      	mov	r0, r2
 8006792:	f7ff f9c1 	bl	8005b18 <RingGetAllBytes>
 8006796:	4603      	mov	r3, r0
 8006798:	461a      	mov	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80067a6:	3301      	adds	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80067b6:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d107      	bne.n	80067d2 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6858      	ldr	r0, [r3, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	33a6      	adds	r3, #166	; 0xa6
 80067ca:	2201      	movs	r2, #1
 80067cc:	4619      	mov	r1, r3
 80067ce:	f7fb fa28 	bl	8001c22 <HAL_UART_Receive_IT>
	}

    return i16result;
 80067d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80067ee:	3b02      	subs	r3, #2
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	4413      	add	r3, r2
 80067f4:	7cdb      	ldrb	r3, [r3, #19]
 80067f6:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80067f8:	b21a      	sxth	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006800:	3b01      	subs	r3, #1
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	440b      	add	r3, r1
 8006806:	7cdb      	ldrb	r3, [r3, #19]
 8006808:	b21b      	sxth	r3, r3
 800680a:	4313      	orrs	r3, r2
 800680c:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800680e:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f103 0213 	add.w	r2, r3, #19
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800681c:	3b02      	subs	r3, #2
 800681e:	b2db      	uxtb	r3, r3
 8006820:	4619      	mov	r1, r3
 8006822:	4610      	mov	r0, r2
 8006824:	f000 f938 	bl	8006a98 <calcCRC>
 8006828:	4603      	mov	r3, r0
 800682a:	461a      	mov	r2, r3
 800682c:	893b      	ldrh	r3, [r7, #8]
 800682e:	4293      	cmp	r3, r2
 8006830:	d009      	beq.n	8006846 <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8006838:	3301      	adds	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 8006842:	23fc      	movs	r3, #252	; 0xfc
 8006844:	e10f      	b.n	8006a66 <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800684a:	2300      	movs	r3, #0
 800684c:	73bb      	strb	r3, [r7, #14]
 800684e:	e00c      	b.n	800686a <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	4a87      	ldr	r2, [pc, #540]	; (8006a70 <validateRequest+0x290>)
 8006854:	5cd2      	ldrb	r2, [r2, r3]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	7d1b      	ldrb	r3, [r3, #20]
 800685a:	429a      	cmp	r2, r3
 800685c:	d102      	bne.n	8006864 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800685e:	2301      	movs	r3, #1
 8006860:	73fb      	strb	r3, [r7, #15]
	            break;
 8006862:	e005      	b.n	8006870 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8006864:	7bbb      	ldrb	r3, [r7, #14]
 8006866:	3301      	adds	r3, #1
 8006868:	73bb      	strb	r3, [r7, #14]
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	2b07      	cmp	r3, #7
 800686e:	d9ef      	bls.n	8006850 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	f083 0301 	eor.w	r3, r3, #1
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d009      	beq.n	8006890 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8006882:	3301      	adds	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 800688c:	2301      	movs	r3, #1
 800688e:	e0ea      	b.n	8006a66 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	7d1b      	ldrb	r3, [r3, #20]
 800689c:	3b01      	subs	r3, #1
 800689e:	2b0f      	cmp	r3, #15
 80068a0:	f200 80e0 	bhi.w	8006a64 <validateRequest+0x284>
 80068a4:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <validateRequest+0xcc>)
 80068a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068aa:	bf00      	nop
 80068ac:	080068ed 	.word	0x080068ed
 80068b0:	080068ed 	.word	0x080068ed
 80068b4:	08006a05 	.word	0x08006a05
 80068b8:	08006a05 	.word	0x08006a05
 80068bc:	08006999 	.word	0x08006999
 80068c0:	080069e1 	.word	0x080069e1
 80068c4:	08006a65 	.word	0x08006a65
 80068c8:	08006a65 	.word	0x08006a65
 80068cc:	08006a65 	.word	0x08006a65
 80068d0:	08006a65 	.word	0x08006a65
 80068d4:	08006a65 	.word	0x08006a65
 80068d8:	08006a65 	.word	0x08006a65
 80068dc:	08006a65 	.word	0x08006a65
 80068e0:	08006a65 	.word	0x08006a65
 80068e4:	080068ed 	.word	0x080068ed
 80068e8:	08006a05 	.word	0x08006a05
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	7d5a      	ldrb	r2, [r3, #21]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	7d9b      	ldrb	r3, [r3, #22]
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f000 f8bc 	bl	8006a74 <word>
 80068fc:	4603      	mov	r3, r0
 80068fe:	091b      	lsrs	r3, r3, #4
 8006900:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	7dda      	ldrb	r2, [r3, #23]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	7e1b      	ldrb	r3, [r3, #24]
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f000 f8b1 	bl	8006a74 <word>
 8006912:	4603      	mov	r3, r0
 8006914:	091b      	lsrs	r3, r3, #4
 8006916:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	7dda      	ldrb	r2, [r3, #23]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	7e1b      	ldrb	r3, [r3, #24]
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f000 f8a6 	bl	8006a74 <word>
 8006928:	4603      	mov	r3, r0
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <validateRequest+0x15a>
 8006934:	897b      	ldrh	r3, [r7, #10]
 8006936:	3301      	adds	r3, #1
 8006938:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 800693a:	89ba      	ldrh	r2, [r7, #12]
 800693c:	897b      	ldrh	r3, [r7, #10]
 800693e:	4413      	add	r3, r2
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8006946:	4293      	cmp	r3, r2
 8006948:	dd01      	ble.n	800694e <validateRequest+0x16e>
 800694a:	2302      	movs	r3, #2
 800694c:	e08b      	b.n	8006a66 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	7dda      	ldrb	r2, [r3, #23]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	7e1b      	ldrb	r3, [r3, #24]
 8006956:	4619      	mov	r1, r3
 8006958:	4610      	mov	r0, r2
 800695a:	f000 f88b 	bl	8006a74 <word>
 800695e:	4603      	mov	r3, r0
 8006960:	08db      	lsrs	r3, r3, #3
 8006962:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	7dda      	ldrb	r2, [r3, #23]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	7e1b      	ldrb	r3, [r3, #24]
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f000 f880 	bl	8006a74 <word>
 8006974:	4603      	mov	r3, r0
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	b29b      	uxth	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <validateRequest+0x1a6>
 8006980:	897b      	ldrh	r3, [r7, #10]
 8006982:	3301      	adds	r3, #1
 8006984:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8006986:	897b      	ldrh	r3, [r7, #10]
 8006988:	3305      	adds	r3, #5
 800698a:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800698c:	897b      	ldrh	r3, [r7, #10]
 800698e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006992:	d960      	bls.n	8006a56 <validateRequest+0x276>
 8006994:	2303      	movs	r3, #3
 8006996:	e066      	b.n	8006a66 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	7d5a      	ldrb	r2, [r3, #21]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	7d9b      	ldrb	r3, [r3, #22]
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f000 f866 	bl	8006a74 <word>
 80069a8:	4603      	mov	r3, r0
 80069aa:	091b      	lsrs	r3, r3, #4
 80069ac:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	7d5a      	ldrb	r2, [r3, #21]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	7d9b      	ldrb	r3, [r3, #22]
 80069b6:	4619      	mov	r1, r3
 80069b8:	4610      	mov	r0, r2
 80069ba:	f000 f85b 	bl	8006a74 <word>
 80069be:	4603      	mov	r3, r0
 80069c0:	f003 030f 	and.w	r3, r3, #15
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <validateRequest+0x1f0>
 80069ca:	89bb      	ldrh	r3, [r7, #12]
 80069cc:	3301      	adds	r3, #1
 80069ce:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80069d6:	89ba      	ldrh	r2, [r7, #12]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d93e      	bls.n	8006a5a <validateRequest+0x27a>
 80069dc:	2302      	movs	r3, #2
 80069de:	e042      	b.n	8006a66 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	7d5a      	ldrb	r2, [r3, #21]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	7d9b      	ldrb	r3, [r3, #22]
 80069e8:	4619      	mov	r1, r3
 80069ea:	4610      	mov	r0, r2
 80069ec:	f000 f842 	bl	8006a74 <word>
 80069f0:	4603      	mov	r3, r0
 80069f2:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80069fa:	89ba      	ldrh	r2, [r7, #12]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d92e      	bls.n	8006a5e <validateRequest+0x27e>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e030      	b.n	8006a66 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	7d5a      	ldrb	r2, [r3, #21]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	7d9b      	ldrb	r3, [r3, #22]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f000 f830 	bl	8006a74 <word>
 8006a14:	4603      	mov	r3, r0
 8006a16:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	7dda      	ldrb	r2, [r3, #23]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	7e1b      	ldrb	r3, [r3, #24]
 8006a20:	4619      	mov	r1, r3
 8006a22:	4610      	mov	r0, r2
 8006a24:	f000 f826 	bl	8006a74 <word>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8006a2c:	89ba      	ldrh	r2, [r7, #12]
 8006a2e:	897b      	ldrh	r3, [r7, #10]
 8006a30:	4413      	add	r3, r2
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	dd01      	ble.n	8006a40 <validateRequest+0x260>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e012      	b.n	8006a66 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8006a40:	897b      	ldrh	r3, [r7, #10]
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3305      	adds	r3, #5
 8006a48:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8006a4a:	897b      	ldrh	r3, [r7, #10]
 8006a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a50:	d907      	bls.n	8006a62 <validateRequest+0x282>
 8006a52:	2303      	movs	r3, #3
 8006a54:	e007      	b.n	8006a66 <validateRequest+0x286>
	        break;
 8006a56:	bf00      	nop
 8006a58:	e004      	b.n	8006a64 <validateRequest+0x284>
	        break;
 8006a5a:	bf00      	nop
 8006a5c:	e002      	b.n	8006a64 <validateRequest+0x284>
	        break;
 8006a5e:	bf00      	nop
 8006a60:	e000      	b.n	8006a64 <validateRequest+0x284>
	        break;
 8006a62:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8006a64:	2300      	movs	r3, #0

}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	080074ec 	.word	0x080074ec

08006a74 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	460a      	mov	r2, r1
 8006a7e:	71fb      	strb	r3, [r7, #7]
 8006a80:	4613      	mov	r3, r2
 8006a82:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8006a84:	79bb      	ldrb	r3, [r7, #6]
 8006a86:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8006a8c:	89bb      	ldrh	r3, [r7, #12]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr

08006a98 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8006aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006aa8:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8006aaa:	2300      	movs	r3, #0
 8006aac:	74fb      	strb	r3, [r7, #19]
 8006aae:	e023      	b.n	8006af8 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8006ab0:	7cfb      	ldrb	r3, [r7, #19]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4053      	eors	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	74bb      	strb	r3, [r7, #18]
 8006ac4:	e012      	b.n	8006aec <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	617b      	str	r3, [r7, #20]
            if (flag)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <calcCRC+0x4e>
                temp ^= 0xA001;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8006ae0:	f083 0301 	eor.w	r3, r3, #1
 8006ae4:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8006ae6:	7cbb      	ldrb	r3, [r7, #18]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	74bb      	strb	r3, [r7, #18]
 8006aec:	7cbb      	ldrb	r3, [r7, #18]
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d9e9      	bls.n	8006ac6 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8006af2:	7cfb      	ldrb	r3, [r7, #19]
 8006af4:	3301      	adds	r3, #1
 8006af6:	74fb      	strb	r3, [r7, #19]
 8006af8:	7cfa      	ldrb	r2, [r7, #19]
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d3d7      	bcc.n	8006ab0 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	0a1b      	lsrs	r3, r3, #8
 8006b04:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	021b      	lsls	r3, r3, #8
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	b29b      	uxth	r3, r3

}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	371c      	adds	r7, #28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bc80      	pop	{r7}
 8006b22:	4770      	bx	lr

08006b24 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	6039      	str	r1, [r7, #0]
 8006b2e:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	7d1b      	ldrb	r3, [r3, #20]
 8006b34:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	7a1a      	ldrb	r2, [r3, #8]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	3b80      	subs	r3, #128	; 0x80
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	79fa      	ldrb	r2, [r7, #7]
 8006b4c:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2203      	movs	r2, #3
 8006b52:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8006b56:	bf00      	nop
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr

08006b60 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f103 0213 	add.w	r2, r3, #19
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	f7ff ff8e 	bl	8006a98 <calcCRC>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8006b80:	89fb      	ldrh	r3, [r7, #14]
 8006b82:	0a1b      	lsrs	r3, r3, #8
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	440b      	add	r3, r1
 8006b94:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006bac:	4619      	mov	r1, r3
 8006bae:	89fb      	ldrh	r3, [r7, #14]
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	440b      	add	r3, r1
 8006bb6:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00c      	beq.n	8006bea <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fb f9e3 	bl	8001fa0 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68d8      	ldr	r0, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	8a1b      	ldrh	r3, [r3, #16]
 8006be2:	2201      	movs	r2, #1
 8006be4:	4619      	mov	r1, r3
 8006be6:	f7fa f8df 	bl	8000da8 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6858      	ldr	r0, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f103 0113 	add.w	r1, r3, #19
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f7fa ffcc 	bl	8001b9a <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8006c02:	21fa      	movs	r1, #250	; 0xfa
 8006c04:	2001      	movs	r0, #1
 8006c06:	f7fd fe05 	bl	8004814 <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8006c0a:	bf00      	nop
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f7      	beq.n	8006c0c <sendTxBuffer+0xac>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00c      	beq.n	8006c3e <sendTxBuffer+0xde>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68d8      	ldr	r0, [r3, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8a1b      	ldrh	r3, [r3, #16]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	4619      	mov	r1, r3
 8006c30:	f7fa f8ba 	bl	8000da8 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fb f9e4 	bl	8002006 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d10c      	bne.n	8006c60 <sendTxBuffer+0x100>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8006c4c:	f7fd f902 	bl	8003e54 <xTaskGetTickCount>
 8006c50:	4602      	mov	r2, r0
 8006c52:	2300      	movs	r3, #0
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	2300      	movs	r3, #0
 8006c58:	2102      	movs	r1, #2
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f7fe f880 	bl	8004d60 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8006c6e:	3301      	adds	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 8006c78:	bf00      	nop
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd90      	pop	{r4, r7, pc}

08006c80 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	7d5a      	ldrb	r2, [r3, #21]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7d9b      	ldrb	r3, [r3, #22]
 8006c90:	4619      	mov	r1, r3
 8006c92:	4610      	mov	r0, r2
 8006c94:	f7ff feee 	bl	8006a74 <word>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	7dda      	ldrb	r2, [r3, #23]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	7e1b      	ldrb	r3, [r3, #24]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	f7ff fee4 	bl	8006a74 <word>
 8006cac:	4603      	mov	r3, r0
 8006cae:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8006cb0:	8a3b      	ldrh	r3, [r7, #16]
 8006cb2:	08db      	lsrs	r3, r3, #3
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8006cb8:	8a3b      	ldrh	r3, [r7, #16]
 8006cba:	f003 0307 	and.w	r3, r3, #7
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <process_FC1+0x4a>
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	7dfa      	ldrb	r2, [r7, #23]
 8006cce:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006cde:	461a      	mov	r2, r3
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	4413      	add	r3, r2
 8006cea:	2200      	movs	r2, #0
 8006cec:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	82bb      	strh	r3, [r7, #20]
 8006cf6:	e058      	b.n	8006daa <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8006cf8:	8a7a      	ldrh	r2, [r7, #18]
 8006cfa:	8abb      	ldrh	r3, [r7, #20]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8006d00:	89bb      	ldrh	r3, [r7, #12]
 8006d02:	091b      	lsrs	r3, r3, #4
 8006d04:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8006d06:	89bb      	ldrh	r3, [r7, #12]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006d16:	897b      	ldrh	r3, [r7, #10]
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	7a7b      	ldrb	r3, [r7, #9]
 8006d22:	fa42 f303 	asr.w	r3, r2, r3
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d014      	beq.n	8006d58 <process_FC1+0xd8>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4413      	add	r3, r2
 8006d3a:	7cda      	ldrb	r2, [r3, #19]
 8006d3c:	7dbb      	ldrb	r3, [r7, #22]
 8006d3e:	2101      	movs	r1, #1
 8006d40:	fa01 f303 	lsl.w	r3, r1, r3
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	6879      	ldr	r1, [r7, #4]
 8006d48:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	440b      	add	r3, r1
 8006d54:	74da      	strb	r2, [r3, #19]
 8006d56:	e015      	b.n	8006d84 <process_FC1+0x104>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006d5e:	461a      	mov	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4413      	add	r3, r2
 8006d64:	7cda      	ldrb	r2, [r3, #19]
 8006d66:	7dbb      	ldrb	r3, [r7, #22]
 8006d68:	2101      	movs	r1, #1
 8006d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	43db      	mvns	r3, r3
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	440b      	add	r3, r1
 8006d82:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8006d84:	7dbb      	ldrb	r3, [r7, #22]
 8006d86:	3301      	adds	r3, #1
 8006d88:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8006d8a:	7dbb      	ldrb	r3, [r7, #22]
 8006d8c:	2b07      	cmp	r3, #7
 8006d8e:	d909      	bls.n	8006da4 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8006da4:	8abb      	ldrh	r3, [r7, #20]
 8006da6:	3301      	adds	r3, #1
 8006da8:	82bb      	strh	r3, [r7, #20]
 8006daa:	8aba      	ldrh	r2, [r7, #20]
 8006dac:	8a3b      	ldrh	r3, [r7, #16]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d3a2      	bcc.n	8006cf8 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8006db2:	8a3b      	ldrh	r3, [r7, #16]
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <process_FC1+0x14e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fec1 	bl	8006b60 <sendTxBuffer>
    return u8CopyBufferSize;
 8006dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7d5a      	ldrb	r2, [r3, #21]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	7d9b      	ldrb	r3, [r3, #22]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f7ff fe39 	bl	8006a74 <word>
 8006e02:	4603      	mov	r3, r0
 8006e04:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7dda      	ldrb	r2, [r3, #23]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	7e1b      	ldrb	r3, [r3, #24]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4610      	mov	r0, r2
 8006e12:	f7ff fe2f 	bl	8006a74 <word>
 8006e16:	4603      	mov	r3, r0
 8006e18:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2203      	movs	r2, #3
 8006e28:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8006e2c:	89bb      	ldrh	r3, [r7, #12]
 8006e2e:	81fb      	strh	r3, [r7, #14]
 8006e30:	e032      	b.n	8006e98 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006e38:	89fb      	ldrh	r3, [r7, #14]
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	4413      	add	r3, r2
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	0a1b      	lsrs	r3, r3, #8
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	440b      	add	r3, r1
 8006e52:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006e6a:	89fb      	ldrh	r3, [r7, #14]
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	4413      	add	r3, r2
 8006e70:	881a      	ldrh	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006e78:	4619      	mov	r1, r3
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	440b      	add	r3, r1
 8006e80:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006e88:	3301      	adds	r3, #1
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8006e92:	89fb      	ldrh	r3, [r7, #14]
 8006e94:	3301      	adds	r3, #1
 8006e96:	81fb      	strh	r3, [r7, #14]
 8006e98:	89fa      	ldrh	r2, [r7, #14]
 8006e9a:	89b9      	ldrh	r1, [r7, #12]
 8006e9c:	7afb      	ldrb	r3, [r7, #11]
 8006e9e:	440b      	add	r3, r1
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	dbc6      	blt.n	8006e32 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006eaa:	3302      	adds	r3, #2
 8006eac:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff fe56 	bl	8006b60 <sendTxBuffer>

    return u8CopyBufferSize;
 8006eb4:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	7d5a      	ldrb	r2, [r3, #21]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	7d9b      	ldrb	r3, [r3, #22]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f7ff fdce 	bl	8006a74 <word>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8006edc:	89fb      	ldrh	r3, [r7, #14]
 8006ede:	091b      	lsrs	r3, r3, #4
 8006ee0:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 8006ee2:	89fb      	ldrh	r3, [r7, #14]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	7ddb      	ldrb	r3, [r3, #23]
 8006ef0:	2bff      	cmp	r3, #255	; 0xff
 8006ef2:	d115      	bne.n	8006f20 <process_FC5+0x60>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006efa:	89bb      	ldrh	r3, [r7, #12]
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	4413      	add	r3, r2
 8006f00:	8819      	ldrh	r1, [r3, #0]
 8006f02:	7afb      	ldrb	r3, [r7, #11]
 8006f04:	2201      	movs	r2, #1
 8006f06:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8006f12:	89bb      	ldrh	r3, [r7, #12]
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	4403      	add	r3, r0
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	b292      	uxth	r2, r2
 8006f1c:	801a      	strh	r2, [r3, #0]
 8006f1e:	e016      	b.n	8006f4e <process_FC5+0x8e>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006f26:	89bb      	ldrh	r3, [r7, #12]
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	4413      	add	r3, r2
 8006f2c:	8819      	ldrh	r1, [r3, #0]
 8006f2e:	7afb      	ldrb	r3, [r7, #11]
 8006f30:	2201      	movs	r2, #1
 8006f32:	fa02 f303 	lsl.w	r3, r2, r3
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	43db      	mvns	r3, r3
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8006f42:	89bb      	ldrh	r3, [r7, #12]
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	4403      	add	r3, r0
 8006f48:	400a      	ands	r2, r1
 8006f4a:	b292      	uxth	r2, r2
 8006f4c:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2206      	movs	r2, #6
 8006f52:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006f5c:	3302      	adds	r3, #2
 8006f5e:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff fdfd 	bl	8006b60 <sendTxBuffer>

    return u8CopyBufferSize;
 8006f66:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	7d5a      	ldrb	r2, [r3, #21]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	7d9b      	ldrb	r3, [r3, #22]
 8006f82:	4619      	mov	r1, r3
 8006f84:	4610      	mov	r0, r2
 8006f86:	f7ff fd75 	bl	8006a74 <word>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	7dda      	ldrb	r2, [r3, #23]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	7e1b      	ldrb	r3, [r3, #24]
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f7ff fd6b 	bl	8006a74 <word>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006fa8:	89fb      	ldrh	r3, [r7, #14]
 8006faa:	005b      	lsls	r3, r3, #1
 8006fac:	4413      	add	r3, r2
 8006fae:	89ba      	ldrh	r2, [r7, #12]
 8006fb0:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2206      	movs	r2, #6
 8006fb6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006fc0:	3302      	adds	r3, #2
 8006fc2:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff fdcb 	bl	8006b60 <sendTxBuffer>

    return u8CopyBufferSize;
 8006fca:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b086      	sub	sp, #24
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7d5a      	ldrb	r2, [r3, #21]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	7d9b      	ldrb	r3, [r3, #22]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4610      	mov	r0, r2
 8006fea:	f7ff fd43 	bl	8006a74 <word>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	7dda      	ldrb	r2, [r3, #23]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7e1b      	ldrb	r3, [r3, #24]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	f7ff fd39 	bl	8006a74 <word>
 8007002:	4603      	mov	r3, r0
 8007004:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800700a:	2307      	movs	r3, #7
 800700c:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800700e:	2300      	movs	r3, #0
 8007010:	82bb      	strh	r3, [r7, #20]
 8007012:	e058      	b.n	80070c6 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8007014:	8a7a      	ldrh	r2, [r7, #18]
 8007016:	8abb      	ldrh	r3, [r7, #20]
 8007018:	4413      	add	r3, r2
 800701a:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800701c:	89bb      	ldrh	r3, [r7, #12]
 800701e:	091b      	lsrs	r3, r3, #4
 8007020:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8007022:	89bb      	ldrh	r3, [r7, #12]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	4413      	add	r3, r2
 8007032:	7cdb      	ldrb	r3, [r3, #19]
 8007034:	461a      	mov	r2, r3
 8007036:	7dbb      	ldrb	r3, [r7, #22]
 8007038:	fa42 f303 	asr.w	r3, r2, r3
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	bf14      	ite	ne
 8007044:	2301      	movne	r3, #1
 8007046:	2300      	moveq	r3, #0
 8007048:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800704a:	7a3b      	ldrb	r3, [r7, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d015      	beq.n	800707c <process_FC15+0xa6>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007056:	897b      	ldrh	r3, [r7, #10]
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	4413      	add	r3, r2
 800705c:	8819      	ldrh	r1, [r3, #0]
 800705e:	7a7b      	ldrb	r3, [r7, #9]
 8007060:	2201      	movs	r2, #1
 8007062:	fa02 f303 	lsl.w	r3, r2, r3
 8007066:	b29a      	uxth	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800706e:	897b      	ldrh	r3, [r7, #10]
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	4403      	add	r3, r0
 8007074:	430a      	orrs	r2, r1
 8007076:	b292      	uxth	r2, r2
 8007078:	801a      	strh	r2, [r3, #0]
 800707a:	e016      	b.n	80070aa <process_FC15+0xd4>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007082:	897b      	ldrh	r3, [r7, #10]
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	4413      	add	r3, r2
 8007088:	8819      	ldrh	r1, [r3, #0]
 800708a:	7a7b      	ldrb	r3, [r7, #9]
 800708c:	2201      	movs	r2, #1
 800708e:	fa02 f303 	lsl.w	r3, r2, r3
 8007092:	b29b      	uxth	r3, r3
 8007094:	43db      	mvns	r3, r3
 8007096:	b29a      	uxth	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800709e:	897b      	ldrh	r3, [r7, #10]
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	4403      	add	r3, r0
 80070a4:	400a      	ands	r2, r1
 80070a6:	b292      	uxth	r2, r2
 80070a8:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 80070aa:	7dbb      	ldrb	r3, [r7, #22]
 80070ac:	3301      	adds	r3, #1
 80070ae:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80070b0:	7dbb      	ldrb	r3, [r7, #22]
 80070b2:	2b07      	cmp	r3, #7
 80070b4:	d904      	bls.n	80070c0 <process_FC15+0xea>
        {
            u8bitsno = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	3301      	adds	r3, #1
 80070be:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80070c0:	8abb      	ldrh	r3, [r7, #20]
 80070c2:	3301      	adds	r3, #1
 80070c4:	82bb      	strh	r3, [r7, #20]
 80070c6:	8aba      	ldrh	r2, [r7, #20]
 80070c8:	8a3b      	ldrh	r3, [r7, #16]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d3a2      	bcc.n	8007014 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2206      	movs	r2, #6
 80070d2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80070dc:	3302      	adds	r3, #2
 80070de:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff fd3d 	bl	8006b60 <sendTxBuffer>
    return u8CopyBufferSize;
 80070e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	7d5b      	ldrb	r3, [r3, #21]
 80070fe:	021b      	lsls	r3, r3, #8
 8007100:	b21a      	sxth	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	7d9b      	ldrb	r3, [r3, #22]
 8007106:	b21b      	sxth	r3, r3
 8007108:	4313      	orrs	r3, r2
 800710a:	b21b      	sxth	r3, r3
 800710c:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7ddb      	ldrb	r3, [r3, #23]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	b21a      	sxth	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	7e1b      	ldrb	r3, [r3, #24]
 800711a:	b21b      	sxth	r3, r3
 800711c:	4313      	orrs	r3, r2
 800711e:	b21b      	sxth	r3, r3
 8007120:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8007128:	8a7b      	ldrh	r3, [r7, #18]
 800712a:	b2da      	uxtb	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2206      	movs	r2, #6
 8007134:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 8007138:	2300      	movs	r3, #0
 800713a:	82fb      	strh	r3, [r7, #22]
 800713c:	e01d      	b.n	800717a <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800713e:	8afb      	ldrh	r3, [r7, #22]
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	3307      	adds	r3, #7
        temp = word(
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	4413      	add	r3, r2
 8007148:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800714a:	8afb      	ldrh	r3, [r7, #22]
 800714c:	3304      	adds	r3, #4
 800714e:	005b      	lsls	r3, r3, #1
        temp = word(
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	4413      	add	r3, r2
 8007154:	7cdb      	ldrb	r3, [r3, #19]
 8007156:	4619      	mov	r1, r3
 8007158:	f7ff fc8c 	bl	8006a74 <word>
 800715c:	4603      	mov	r3, r0
 800715e:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007166:	8ab9      	ldrh	r1, [r7, #20]
 8007168:	8afb      	ldrh	r3, [r7, #22]
 800716a:	440b      	add	r3, r1
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	4413      	add	r3, r2
 8007170:	89fa      	ldrh	r2, [r7, #14]
 8007172:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8007174:	8afb      	ldrh	r3, [r7, #22]
 8007176:	3301      	adds	r3, #1
 8007178:	82fb      	strh	r3, [r7, #22]
 800717a:	8afa      	ldrh	r2, [r7, #22]
 800717c:	8a7b      	ldrh	r3, [r7, #18]
 800717e:	429a      	cmp	r2, r3
 8007180:	d3dd      	bcc.n	800713e <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007188:	3302      	adds	r3, #2
 800718a:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff fce7 	bl	8006b60 <sendTxBuffer>

    return u8CopyBufferSize;
 8007192:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 80071ac:	2300      	movs	r3, #0
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e019      	b.n	80071e6 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 80071b2:	4a17      	ldr	r2, [pc, #92]	; (8007210 <HAL_UART_TxCpltCallback+0x70>)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d10e      	bne.n	80071e0 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 80071c2:	4a13      	ldr	r2, [pc, #76]	; (8007210 <HAL_UART_TxCpltCallback+0x70>)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ca:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80071ce:	f107 0308 	add.w	r3, r7, #8
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	2300      	movs	r3, #0
 80071d6:	2200      	movs	r2, #0
 80071d8:	2100      	movs	r1, #0
 80071da:	f7fd fc07 	bl	80049ec <xTaskGenericNotifyFromISR>
	   		break;
 80071de:	e008      	b.n	80071f2 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3301      	adds	r3, #1
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_UART_TxCpltCallback+0x74>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4293      	cmp	r3, r2
 80071f0:	dbdf      	blt.n	80071b2 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <HAL_UART_TxCpltCallback+0x68>
 80071f8:	4b07      	ldr	r3, [pc, #28]	; (8007218 <HAL_UART_TxCpltCallback+0x78>)
 80071fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8007208:	bf00      	nop
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	2000194c 	.word	0x2000194c
 8007214:	20001944 	.word	0x20001944
 8007218:	e000ed04 	.word	0xe000ed04

0800721c <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800721c:	b590      	push	{r4, r7, lr}
 800721e:	b087      	sub	sp, #28
 8007220:	af02      	add	r7, sp, #8
 8007222:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007224:	2300      	movs	r3, #0
 8007226:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e042      	b.n	80072b4 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800722e:	4a2d      	ldr	r2, [pc, #180]	; (80072e4 <HAL_UART_RxCpltCallback+0xc8>)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	429a      	cmp	r2, r3
 800723c:	d137      	bne.n	80072ae <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800723e:	4a29      	ldr	r2, [pc, #164]	; (80072e4 <HAL_UART_RxCpltCallback+0xc8>)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007246:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800724a:	2b01      	cmp	r3, #1
 800724c:	d139      	bne.n	80072c2 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800724e:	4a25      	ldr	r2, [pc, #148]	; (80072e4 <HAL_UART_RxCpltCallback+0xc8>)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007256:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800725a:	4922      	ldr	r1, [pc, #136]	; (80072e4 <HAL_UART_RxCpltCallback+0xc8>)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007262:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8007266:	4619      	mov	r1, r3
 8007268:	4610      	mov	r0, r2
 800726a:	f7fe fc0f 	bl	8005a8c <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800726e:	4a1d      	ldr	r2, [pc, #116]	; (80072e4 <HAL_UART_RxCpltCallback+0xc8>)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007276:	6858      	ldr	r0, [r3, #4]
 8007278:	4a1a      	ldr	r2, [pc, #104]	; (80072e4 <HAL_UART_RxCpltCallback+0xc8>)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007280:	33a6      	adds	r3, #166	; 0xa6
 8007282:	2201      	movs	r2, #1
 8007284:	4619      	mov	r1, r3
 8007286:	f7fa fccc 	bl	8001c22 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800728a:	4a16      	ldr	r2, [pc, #88]	; (80072e4 <HAL_UART_RxCpltCallback+0xc8>)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007292:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8007296:	f7fc fdeb 	bl	8003e70 <xTaskGetTickCountFromISR>
 800729a:	4602      	mov	r2, r0
 800729c:	f107 0308 	add.w	r3, r7, #8
 80072a0:	2100      	movs	r1, #0
 80072a2:	9100      	str	r1, [sp, #0]
 80072a4:	2107      	movs	r1, #7
 80072a6:	4620      	mov	r0, r4
 80072a8:	f7fd fd5a 	bl	8004d60 <xTimerGenericCommand>
    		}
    		break;
 80072ac:	e009      	b.n	80072c2 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3301      	adds	r3, #1
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <HAL_UART_RxCpltCallback+0xcc>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4293      	cmp	r3, r2
 80072be:	dbb6      	blt.n	800722e <HAL_UART_RxCpltCallback+0x12>
 80072c0:	e000      	b.n	80072c4 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 80072c2:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d007      	beq.n	80072da <HAL_UART_RxCpltCallback+0xbe>
 80072ca:	4b08      	ldr	r3, [pc, #32]	; (80072ec <HAL_UART_RxCpltCallback+0xd0>)
 80072cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 80072da:	bf00      	nop
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd90      	pop	{r4, r7, pc}
 80072e2:	bf00      	nop
 80072e4:	2000194c 	.word	0x2000194c
 80072e8:	20001944 	.word	0x20001944
 80072ec:	e000ed04 	.word	0xe000ed04

080072f0 <__libc_init_array>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	2600      	movs	r6, #0
 80072f4:	4d0c      	ldr	r5, [pc, #48]	; (8007328 <__libc_init_array+0x38>)
 80072f6:	4c0d      	ldr	r4, [pc, #52]	; (800732c <__libc_init_array+0x3c>)
 80072f8:	1b64      	subs	r4, r4, r5
 80072fa:	10a4      	asrs	r4, r4, #2
 80072fc:	42a6      	cmp	r6, r4
 80072fe:	d109      	bne.n	8007314 <__libc_init_array+0x24>
 8007300:	f000 f830 	bl	8007364 <_init>
 8007304:	2600      	movs	r6, #0
 8007306:	4d0a      	ldr	r5, [pc, #40]	; (8007330 <__libc_init_array+0x40>)
 8007308:	4c0a      	ldr	r4, [pc, #40]	; (8007334 <__libc_init_array+0x44>)
 800730a:	1b64      	subs	r4, r4, r5
 800730c:	10a4      	asrs	r4, r4, #2
 800730e:	42a6      	cmp	r6, r4
 8007310:	d105      	bne.n	800731e <__libc_init_array+0x2e>
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	f855 3b04 	ldr.w	r3, [r5], #4
 8007318:	4798      	blx	r3
 800731a:	3601      	adds	r6, #1
 800731c:	e7ee      	b.n	80072fc <__libc_init_array+0xc>
 800731e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007322:	4798      	blx	r3
 8007324:	3601      	adds	r6, #1
 8007326:	e7f2      	b.n	800730e <__libc_init_array+0x1e>
 8007328:	080074f4 	.word	0x080074f4
 800732c:	080074f4 	.word	0x080074f4
 8007330:	080074f4 	.word	0x080074f4
 8007334:	080074f8 	.word	0x080074f8

08007338 <memcpy>:
 8007338:	440a      	add	r2, r1
 800733a:	4291      	cmp	r1, r2
 800733c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007340:	d100      	bne.n	8007344 <memcpy+0xc>
 8007342:	4770      	bx	lr
 8007344:	b510      	push	{r4, lr}
 8007346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734a:	4291      	cmp	r1, r2
 800734c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007350:	d1f9      	bne.n	8007346 <memcpy+0xe>
 8007352:	bd10      	pop	{r4, pc}

08007354 <memset>:
 8007354:	4603      	mov	r3, r0
 8007356:	4402      	add	r2, r0
 8007358:	4293      	cmp	r3, r2
 800735a:	d100      	bne.n	800735e <memset+0xa>
 800735c:	4770      	bx	lr
 800735e:	f803 1b01 	strb.w	r1, [r3], #1
 8007362:	e7f9      	b.n	8007358 <memset+0x4>

08007364 <_init>:
 8007364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007366:	bf00      	nop
 8007368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736a:	bc08      	pop	{r3}
 800736c:	469e      	mov	lr, r3
 800736e:	4770      	bx	lr

08007370 <_fini>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	bf00      	nop
 8007374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007376:	bc08      	pop	{r3}
 8007378:	469e      	mov	lr, r3
 800737a:	4770      	bx	lr
